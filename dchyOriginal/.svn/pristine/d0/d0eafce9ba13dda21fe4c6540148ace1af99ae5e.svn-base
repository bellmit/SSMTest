package cn.gtmap.msurveyplat.promanage.core.service.impl;


import cn.gtmap.msurveyplat.common.annotion.SystemLog;
import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.EntityMapper;
import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.Example;
import cn.gtmap.msurveyplat.common.core.support.mybatis.page.repository.Repository;
import cn.gtmap.msurveyplat.common.domain.dchyxmgl.*;
import cn.gtmap.msurveyplat.common.dto.*;
import cn.gtmap.msurveyplat.common.util.*;
import cn.gtmap.msurveyplat.promanage.core.mapper.DchyXmglChxmClsxMapper;
import cn.gtmap.msurveyplat.promanage.core.mapper.DchyXmglChxmMapper;
import cn.gtmap.msurveyplat.promanage.core.service.CommissionFilingService;
import cn.gtmap.msurveyplat.promanage.core.service.DchyXmglZdService;
import cn.gtmap.msurveyplat.promanage.core.service.MessagePushService;
import cn.gtmap.msurveyplat.promanage.core.service.mq.service.PushDataToMqService;
import cn.gtmap.msurveyplat.promanage.utils.Constants;
import cn.gtmap.msurveyplat.promanage.utils.ConstructionCodeUtil;
import cn.gtmap.msurveyplat.promanage.utils.UserUtil;
import cn.gtmap.msurveyplat.promanage.web.utils.XmbhFormatUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.gtis.common.util.UUIDGenerator;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

/**
 * @author <a href="mailto:lijingmo@gtmap.cn">lijingmo</a>
 * @version 1.o, 2020-12-09
 * description
 */
@Service
public class CommissionFilingServiceImpl implements CommissionFilingService {

    @Autowired
    PushDataToMqService pushDataToMqService;

    @Autowired
    DchyXmglChxmMapper dchyXmglChxmMapper;

    @Autowired
    DchyXmglZdService dchyXmglZdService;

    @Autowired
    EntityMapper entityMapper;

    @Autowired
    Repository repository;

    @Autowired
    MessagePushService messagePushService;

    @Autowired
    DchyXmglChxmClsxMapper dchyXmglChxmClsxMapper;

    private Logger logger = LoggerFactory.getLogger(CommissionFilingServiceImpl.class);

    @Override
    @Transactional
    @SystemLog(czmkMc = ProLog.CZMK_BALB_MC, czmkCode = ProLog.CZMK_BALB_CODE, czlxMc = ProLog.CZLX_SAVE_MC, czlxCode = ProLog.CZLX_SAVE_CODE, ssmkid = ProLog.SSMKID_HTBASL_CODE)
    public boolean reviewCommission(Map<String, Object> map) {
        logger.info("****************************线下备案审核后推送线上备份开始********************************");
        //消息提醒推送
        DchyXmglXxtxDto dchyXmglXxtxDto = new DchyXmglXxtxDto();
        String chxmid = CommonUtil.formatEmptyValue(map.get("chxmid"));
        String sftg = CommonUtil.formatEmptyValue(map.get("sftg"));
        String gcmc = CommonUtil.formatEmptyValue(map.get("gcmc"));
        String wtdw = CommonUtil.formatEmptyValue(map.get("wtdw"));
        String shyj = CommonUtil.formatEmptyValue(map.get("shyj"));
        try {
            String slr = UserUtil.getCurrentUserId();
            Date slsj = new Date();
            DchyXmglChxm dchyXmglChxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
            dchyXmglChxm.setSlr(slr);
            dchyXmglChxm.setSlsj(slsj);
            dchyXmglChxm.setChxmid(chxmid);
            dchyXmglChxm.setXmzt(Constants.DCHY_XMGL_CHXM_XMZT_YSL);
            //更新委托状态
            String wtzt = dchyXmglChxm.getWtzt();
            if (StringUtils.equals(sftg, Constants.SHTG)) {
                //备案审核通过
                if (StringUtils.isNotBlank(wtzt)) {
                    dchyXmglChxm.setWtzt(Constants.WTZT_YBA); //委托状态已备案
                }
            } else if (StringUtils.equals(sftg, Constants.SHBTG)) {
                //备案审核不通过
                if (StringUtils.isNotBlank(wtzt)) {
                    dchyXmglChxm.setWtzt(Constants.WTZT_YTH); //委托状态已退回
                }
            }

            //备案编号
            String xmbh = obtainXmbh(chxmid, wtdw);
            if (StringUtils.isNotEmpty(xmbh)) {
                dchyXmglChxm.setXmbh(xmbh);
            }

            logger.info("委托状态：" + wtzt + "**********************************");
            int result = entityMapper.saveOrUpdate(dchyXmglChxm, dchyXmglChxm.getChxmid());
            if (result > 0) {
                //组织推送数据
                List<DchyXmglChxmDto> dchyXmglChxmDtoList = this.generateChxmDto(chxmid, wtzt, sftg, shyj);

                //用户消息
                List<Map<String, Object>> chdwxxList = (List<Map<String, Object>>) map.get("chdwxx");
                List<DchyXmglYhxx> yhxxList = this.generateYhxx(gcmc, wtdw, chxmid, sftg, chdwxxList);
                //组织用户消息数据同步
                dchyXmglXxtxDto.setDchyXmglYhxxList(yhxxList);

                Map<String, Object> resultMap = new HashMap<>();
                Map<String, Object> resultMapXxtx = new HashMap<>();
                resultMap.put("saveOrUpdate", dchyXmglChxmDtoList);
                resultMapXxtx.put("saveOrUpdate", dchyXmglXxtxDto);
                pushDataToMqService.pushBaxxMsgToMq(JSON.toJSONString(resultMap));
                pushDataToMqService.pushXxtxResultTo(dchyXmglXxtxDto);

                //logger.info(JSONObject.toJSONString(dchyXmglChxmDtoList));
                logger.info("*********************************线下备案审核推送线上备份结束***********************************");
                return true;
            }
        } catch (Exception e) {
            List<DchyXmglChxmDto> failDchyXmglChxmDtoList = Lists.newArrayList();
            DchyXmglChxmDto failDchyXmglChxmDto = new DchyXmglChxmDto();
            DchyXmglXxtxDto failDchyXmglXxtxDto = new DchyXmglXxtxDto();
            DchyXmglChxm dchyXmglChxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
            dchyXmglChxm.setWtzt(Constants.WTZT_CXBA);
            failDchyXmglChxmDto.setDchyXmglChxm(dchyXmglChxm);
            failDchyXmglChxmDtoList.add(failDchyXmglChxmDto);

            //用户消息
            List<Map<String, Object>> chdwxxList = (List<Map<String, Object>>) map.get("chdwxx");
            List<DchyXmglYhxx> yhxxList = this.generateYhxx(gcmc, wtdw, chxmid, sftg, chdwxxList);
            //组织用户消息数据同步
            failDchyXmglXxtxDto.setDchyXmglYhxxList(yhxxList);

            Map<String, Object> resultMap = new HashMap<>();
            Map<String, Object> failResultMap = new HashMap<>();
            resultMap.put("saveOrUpdate", failDchyXmglChxmDtoList);
            failResultMap.put("saveOrUpdate", failDchyXmglXxtxDto);
            pushDataToMqService.pushBaxxMsgToMq(JSON.toJSONString(resultMap));
            pushDataToMqService.pushXxtxResultTo(failDchyXmglXxtxDto);
            logger.error("错误原因{}", e);
            return false;
        }
        return false;
    }

    private List<DchyXmglChxmDto> generateChxmDto(String chxmid, String wtzt, String sftg, String shyj) {
        List<DchyXmglChxmDto> dchyXmglChxmDtoList = Lists.newArrayList();
        List<DchyXmglChxmClsx> dchyXmglChxmClsxList = Lists.newArrayList();
        List<DchyXmglChxmChdwxx> dchyXmglChxmChdwxxList = Lists.newArrayList();
        List<DchyXmglSjxx> dchyXmglSjxxList = Lists.newArrayList();
        List<DchyXmglSjcl> dchyXmglSjclList = Lists.newArrayList();
        List<DchyXmglYbrw> dchyXmglYbrwList = Lists.newArrayList();
        List<DchyXmglSqxx> dchyXmglSqxxList = Lists.newArrayList();

        //获取测绘项目涉及的测绘阶段
        Map<String, Object> paramMap = Maps.newHashMap();
        paramMap.put("chxmid", chxmid);
        List<Map<String, Object>> clsxList = dchyXmglChxmClsxMapper.queryClsxJdByChxmid(paramMap);
        if (clsxList != null) {
            //取出测绘阶段
            Set set = new HashSet();
            List newList = new ArrayList();
            for (Map clsxLists : clsxList) {
                if (set.add(MapUtils.getString(clsxLists, "FDM"))) {
                    newList.add(MapUtils.getString(clsxLists, "FDM"));
                }
            }

            //根据测绘阶段拆分
            if (CollectionUtils.isNotEmpty(newList)) {
                for (Iterator<String> it = newList.iterator(); it.hasNext(); ) {
                    DchyXmglChxmDto dchyXmglChxmDto = new DchyXmglChxmDto();
                    //拆分组织测绘项目
                    DchyXmglChxm oldDchyXmglChxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
                    if (oldDchyXmglChxm != null) {
                        String newChxmid = UUIDGenerator.generate18();
                        oldDchyXmglChxm.setChxmid(newChxmid);
                        oldDchyXmglChxm.setWtzt(wtzt);
                        entityMapper.saveOrUpdate(oldDchyXmglChxm, oldDchyXmglChxm.getChxmid());
                        dchyXmglChxmDto.setDchyXmglChxm(oldDchyXmglChxm);

                        //拆分组织测绘项目测绘单位(目前测绘单位是单选)
                        String newChdwxxid = null;
                        Example exampleChxmChdwxx = new Example(DchyXmglChxmChdwxx.class);
                        exampleChxmChdwxx.createCriteria().andEqualTo("chxmid", chxmid);
                        List<DchyXmglChxmChdwxx> oldDchyXmglChxmChdwxx = entityMapper.selectByExampleNotNull(exampleChxmChdwxx);
                        if (CollectionUtils.isNotEmpty(oldDchyXmglChxmChdwxx)) {
                            for (DchyXmglChxmChdwxx oldDchyXmglChxmChdwxxs : oldDchyXmglChxmChdwxx) {
                                newChdwxxid = UUIDGenerator.generate18();
                                oldDchyXmglChxmChdwxxs.setChdwxxid(newChdwxxid);
                                oldDchyXmglChxmChdwxxs.setChxmid(newChxmid);
                                entityMapper.saveOrUpdate(oldDchyXmglChxmChdwxxs, oldDchyXmglChxmChdwxxs.getChdwxxid());
                                dchyXmglChxmChdwxxList.add(oldDchyXmglChxmChdwxxs);
                            }
                            dchyXmglChxmDto.setDchyXmglChxmChdwxxList(dchyXmglChxmChdwxxList);
                        }

                        //拆分组织测绘项目测绘事项
                        for (Map<String, Object> clsxMap : clsxList) {
                            if (StringUtils.equals(MapUtils.getString(clsxMap, "FDM"), it.next())) {
                                String oldClsx = MapUtils.getString(clsxMap, "CLSX");
                                Example exampleChxmClsx = new Example(DchyXmglChxmClsx.class);
                                exampleChxmClsx.createCriteria().andEqualTo("chxmid", chxmid).andEqualTo("clsx", oldClsx);
                                List<DchyXmglChxmClsx> oldDchyXmglChxmClsxList = entityMapper.selectByExampleNotNull(exampleChxmClsx);
                                if (CollectionUtils.isNotEmpty(oldDchyXmglChxmClsxList)) {
                                    List newClsxList = Lists.newArrayList();
                                    for (DchyXmglChxmClsx oldDchyXmglChxmClsx : oldDchyXmglChxmClsxList) {
                                        String newClsxid = UUIDGenerator.generate18();
                                        newClsxList.add(newClsxid);
                                        oldDchyXmglChxmClsx.setClsxid(newClsxid);
                                        oldDchyXmglChxmClsx.setChxmid(newChxmid);
                                        entityMapper.saveOrUpdate(oldDchyXmglChxmClsx, oldDchyXmglChxmClsx.getClsxid());
                                        dchyXmglChxmClsxList.add(oldDchyXmglChxmClsx);

                                        //根据测绘事项拆分收件信息
                                        Example exampleSjxx = new Example(DchyXmglSjxx.class);
                                        exampleSjxx.createCriteria().andEqualTo("glsxid", chxmid);
                                        List<DchyXmglSjxx> oldDchyXmglSjxxList = entityMapper.selectByExampleNotNull(exampleSjxx);
                                        if (CollectionUtils.isNotEmpty(oldDchyXmglSjxxList)) {
                                            for (DchyXmglSjxx oldDchyXmglSjxx : oldDchyXmglSjxxList) {
                                                String sjxxid = oldDchyXmglSjxx.getSjxxid();
                                                String newSjxxid = UUIDGenerator.generate18();
                                                oldDchyXmglSjxx.setSjxxid(newSjxxid);
                                                oldDchyXmglSjxx.setGlsxid(newChxmid);
                                                entityMapper.saveOrUpdate(oldDchyXmglSjxx, oldDchyXmglSjxx.getSjxxid());
                                                dchyXmglSjxxList.add(oldDchyXmglSjxx);

                                                //根据测绘事项拆分收件材料
                                                Example exampleSjcl = new Example(DchyXmglSjcl.class);
                                                exampleSjcl.createCriteria().andEqualTo("sjxxid", sjxxid).andEqualTo("clsx", oldClsx);
                                                List<DchyXmglSjcl> oldDchyXmglSjclList = entityMapper.selectByExampleNotNull(exampleSjcl);
                                                if (CollectionUtils.isNotEmpty(oldDchyXmglSjclList)) {
                                                    for (DchyXmglSjcl oldDchyXmglSjcl : oldDchyXmglSjclList) {
                                                        String newSjclid = UUIDGenerator.generate18();
                                                        oldDchyXmglSjcl.setSjclid(newSjclid);
                                                        oldDchyXmglSjcl.setSjxxid(newSjxxid);
                                                        entityMapper.saveOrUpdate(oldDchyXmglSjcl, oldDchyXmglSjcl.getSjclid());
                                                        dchyXmglSjclList.add(oldDchyXmglSjcl);
                                                    }
                                                }
                                            }
                                            dchyXmglChxmDto.setDchyXmglSjxxList(dchyXmglSjxxList);
                                            dchyXmglChxmDto.setDchyXmglSjclList(dchyXmglSjclList);
                                        }

                                        //拆分合同
                                        List<DchyXmglHtxxDto> dchyXmglHtxxDtoList = this.generateHtxxList(chxmid, newChxmid, newChdwxxid, newClsxList);
                                        dchyXmglChxmDto.setDchyXmglHtxxDtoList(dchyXmglHtxxDtoList);
                                    }
                                }
                            }
                        }
                    }

                    //测绘工程
                    DchyXmglChxm dchyXmglChxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
                    if (dchyXmglChxm != null) {
                        String chgcid = dchyXmglChxm.getChgcid();
                        if (StringUtils.isNotEmpty(chgcid)) {
                            DchyXmglChgc dchyXmglChgc = entityMapper.selectByPrimaryKey(DchyXmglChgc.class, chgcid);
                            dchyXmglChxmDto.setDchyXmglChgc(dchyXmglChgc);
                        }
                    }
                }
            }

            //根据chxmid获取当前待办任务的dbrwid，备案后转为已办任务
            String dbrwid = null;
            Example sqxxExample = new Example(DchyXmglSqxx.class);
            sqxxExample.createCriteria().andEqualTo("glsxid", chxmid);
            List<DchyXmglSqxx> sqxxList = entityMapper.selectByExampleNotNull(sqxxExample);
            if (CollectionUtils.isNotEmpty(sqxxList)) {
                for (DchyXmglSqxx sqxxLists : sqxxList) {
                    String sqxxid = sqxxLists.getSqxxid();
                    Example dbrwExample = new Example(DchyXmglDbrw.class);
                    dbrwExample.createCriteria().andEqualTo("sqxxid", sqxxid);
                    List<DchyXmglDbrw> dbrwList = entityMapper.selectByExampleNotNull(dbrwExample);
                    if (CollectionUtils.isNotEmpty(dbrwList)) {
                        for (DchyXmglDbrw dbrwLists : dbrwList) {
                            dbrwid = dbrwLists.getDbrwid();

                            boolean shtg = StringUtils.equalsIgnoreCase(sftg, "1");

                            /*新生成一条已办数据*/
                            DchyXmglYbrw dchyXmglYbrw = new DchyXmglYbrw();
                            dchyXmglYbrw.setBlryid(UserUtil.getCurrentUserId());
                            dchyXmglYbrw.setBlyj(shyj);
                            dchyXmglYbrw.setJssj(new Date());
                            dchyXmglYbrw.setSqxxid(sqxxid);
                            dchyXmglYbrw.setBljg(shtg ? Constants.INVALID : Constants.VALID);
                            dchyXmglYbrw.setDqjd(dbrwLists.getDqjd());
                            dchyXmglYbrw.setZrsj(dbrwLists.getZrsj());
                            dchyXmglYbrw.setYbrwid(dbrwLists.getDbrwid());

                            /*保存已办任务*/
                            entityMapper.saveOrUpdate(dchyXmglYbrw, dchyXmglYbrw.getYbrwid());
                            dchyXmglYbrwList.add(dchyXmglYbrw);

                            DchyXmglSqxx dchyXmglSqxx = entityMapper.selectByPrimaryKey(DchyXmglSqxx.class, sqxxid);
                            if (shtg) {
                                dchyXmglSqxx.setSqzt(Constants.DCHY_XMGL_SQZT_TH);
                            } else {
                                dchyXmglSqxx.setSqzt(Constants.DCHY_XMGL_SQZT_SHTG);
                            }
                            int sqxx = entityMapper.saveOrUpdate(dchyXmglSqxx, sqxxid);
                            dchyXmglSqxxList.add(dchyXmglSqxx);
                        }
                    }
                }

                //删除待办任务
                entityMapper.deleteByPrimaryKey(DchyXmglDbrw.class, dbrwid);
            }

            //删除原关系表
            Example exampleDelClsxHtxx = new Example(DchyXmglClsxHtxxGx.class);
            exampleDelClsxHtxx.createCriteria().andEqualTo("chxmid", chxmid);
            entityMapper.deleteByExampleNotNull(exampleDelClsxHtxx);

            Example exampleDelHtxxChdwxx = new Example(DchyXmglHtxxChdwxxGx.class);
            exampleDelHtxxChdwxx.createCriteria().andEqualTo("chxmid", chxmid);
            entityMapper.deleteByExampleNotNull(exampleDelHtxxChdwxx);

            Example exampleDelClsxChdwxx = new Example(DchyXmglClsxChdwxxGx.class);
            exampleDelClsxChdwxx.createCriteria().andEqualTo("chxmid", chxmid);
            entityMapper.deleteByExampleNotNull(exampleDelClsxChdwxx);
        }

        return dchyXmglChxmDtoList;
    }


    private List<DchyXmglHtxxDto> generateHtxxList(String chxmid, String newChxmid, String newChdwxxid, List newClsxList) {
        List<DchyXmglHtxxDto> dchyXmglHtxxDtoList = Lists.newArrayList();

        List<DchyXmglHtxxChdwxxGx> dchyXmglHtxxChdwxxGxList = Lists.newArrayList();
        List<DchyXmglClsxHtxxGx> dchyXmglClsxHtxxGxList = Lists.newArrayList();
        List<DchyXmglClsxChdwxxGx> dchyXmglClsxChdwxxGxList = Lists.newArrayList();
        List<DchyXmglSjxx> dchyXmglSjxxList = Lists.newArrayList();
        List<DchyXmglSjcl> dchyXmglSjclList = Lists.newArrayList();

        Example exampleHtxx = new Example(DchyXmglHtxx.class);
        exampleHtxx.createCriteria().andEqualTo("chxmid", chxmid);
        List<DchyXmglHtxx> oldDchyXmglHtxxList = entityMapper.selectByExampleNotNull(exampleHtxx);
        if (CollectionUtils.isNotEmpty(oldDchyXmglHtxxList)) {
            DchyXmglHtxxDto dchyXmglHtxxDto = new DchyXmglHtxxDto();

            for (DchyXmglHtxx oldDchyXmglHtxx : oldDchyXmglHtxxList) {
                String htxxid = oldDchyXmglHtxx.getHtxxid();
                String newHtxxid = UUIDGenerator.generate18();
                oldDchyXmglHtxx.setHtxxid(newHtxxid);
                oldDchyXmglHtxx.setChxmid(newChxmid);
                entityMapper.saveOrUpdate(oldDchyXmglHtxx, oldDchyXmglHtxx.getHtxxid());
                dchyXmglHtxxDto.setDchyXmglHtxx(oldDchyXmglHtxx);

                //更新组织收件信息
                Example exampleSjxx = new Example(DchyXmglSjxx.class);
                exampleSjxx.createCriteria().andEqualTo("glsxid", htxxid);
                List<DchyXmglSjxx> oldDchyXmglSjxxList = entityMapper.selectByExampleNotNull(exampleSjxx);
                if (CollectionUtils.isNotEmpty(oldDchyXmglSjxxList)) {
                    for (DchyXmglSjxx oldDchyXmglSjxx : oldDchyXmglSjxxList) {
                        String htsjclid = oldDchyXmglSjxx.getSjxxid();
                        String newSjxxid = UUIDGenerator.generate18();
                        oldDchyXmglSjxx.setSjxxid(newSjxxid);
                        oldDchyXmglSjxx.setGlsxid(newChxmid);
                        entityMapper.saveOrUpdate(oldDchyXmglSjxx, oldDchyXmglSjxx.getSjxxid());
                        dchyXmglSjxxList.add(oldDchyXmglSjxx);

                        //收件材料
                        Example exampleSjcl1 = new Example(DchyXmglSjcl.class);
                        exampleSjcl1.createCriteria().andEqualTo("sjxxid", htsjclid);
                        List<DchyXmglSjcl> oldDchyXmglSjclList1 = entityMapper.selectByExampleNotNull(exampleSjcl1);
                        if (CollectionUtils.isNotEmpty(oldDchyXmglSjclList1)) {
                            for (DchyXmglSjcl oldDchyXmglSjclLists1 : oldDchyXmglSjclList1) {
                                String newSjclid = UUIDGenerator.generate18();
                                oldDchyXmglSjclLists1.setSjclid(newSjclid);
                                oldDchyXmglSjclLists1.setSjxxid(newSjxxid);
                                entityMapper.saveOrUpdate(oldDchyXmglSjclLists1, oldDchyXmglSjclLists1.getSjclid());
                                dchyXmglSjclList.add(oldDchyXmglSjclLists1);
                            }
                        }
                    }
                }

                //合同与测绘单位
                if (StringUtils.isNotEmpty(newChdwxxid)) {
                    DchyXmglHtxxChdwxxGx dchyXmglHtxxChdwxxGx = new DchyXmglHtxxChdwxxGx();
                    String newGxid = UUIDGenerator.generate18();
                    dchyXmglHtxxChdwxxGx.setGxid(newGxid);
                    dchyXmglHtxxChdwxxGx.setHtxxid(newHtxxid);
                    dchyXmglHtxxChdwxxGx.setChdwxxid(newChdwxxid);
                    dchyXmglHtxxChdwxxGx.setChxmid(newChxmid);
                    entityMapper.saveOrUpdate(dchyXmglHtxxChdwxxGx, dchyXmglHtxxChdwxxGx.getGxid());
                    dchyXmglHtxxChdwxxGxList.add(dchyXmglHtxxChdwxxGx);
                    dchyXmglHtxxDto.setDchyXmglHtxxChdwxxGxList(dchyXmglHtxxChdwxxGxList);

                }

                //获取测绘阶段，拆分组织测绘项目测绘事项
                Iterator<String> iterator = newClsxList.iterator();
                while (iterator.hasNext()) {
                    String newClsxid = iterator.next();
                    //合同测量事项
                    DchyXmglClsxHtxxGx dchyXmglClsxHtxxGx = new DchyXmglClsxHtxxGx();
                    dchyXmglClsxHtxxGx.setGxid(UUIDGenerator.generate18());
                    dchyXmglClsxHtxxGx.setClsxid(newClsxid);
                    dchyXmglClsxHtxxGx.setHtxxid(newHtxxid);
                    dchyXmglClsxHtxxGx.setChxmid(newChxmid);
                    entityMapper.saveOrUpdate(dchyXmglClsxHtxxGx, dchyXmglClsxHtxxGx.getGxid());
                    dchyXmglClsxHtxxGxList.add(dchyXmglClsxHtxxGx);

                    //更新测量事项与测绘单位关系
                    DchyXmglClsxChdwxxGx dchyXmglClsxChdwxxGx = new DchyXmglClsxChdwxxGx();
                    dchyXmglClsxChdwxxGx.setGxid(UUIDGenerator.generate18());
                    dchyXmglClsxChdwxxGx.setClsxid(newClsxid);
                    dchyXmglClsxChdwxxGx.setChdwxxid(newChdwxxid);
                    entityMapper.saveOrUpdate(dchyXmglClsxChdwxxGx, dchyXmglClsxChdwxxGx.getGxid());
                    dchyXmglClsxChdwxxGxList.add(dchyXmglClsxChdwxxGx);
                }
                dchyXmglHtxxDto.setDchyXmglClsxHtxxGxList(dchyXmglClsxHtxxGxList);
                dchyXmglHtxxDto.setDchyXmglClsxChdwxxGxList(dchyXmglClsxChdwxxGxList);
            }
            dchyXmglHtxxDtoList.add(dchyXmglHtxxDto);
        }
        return dchyXmglHtxxDtoList;
    }

    private List<DchyXmglYhxx> generateYhxx(String xmmc, String wtdw, String chxmid, String sftg, List<Map<String, Object>> chdwxxList) {
        String xxnr = null;
        String xxlx = null;
        String sftz = null;
        String yhxxpzid = null;
        DchyXmglChxm dchyXmglChxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
        if (dchyXmglChxm != null) {
            String wtzt = dchyXmglChxm.getWtzt();
            if (StringUtils.isNotEmpty(wtzt)) {
                if (StringUtils.equals(sftg, "1")) {
                    yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_XSWTSHTG;
                } else if (StringUtils.equals(sftg, "0")) {
                    yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_XSWTSHBTG;
                }
            } else {
                if (StringUtils.equals(sftg, "1")) {
                    yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_HTBAYTG;
                } else if (StringUtils.equals(sftg, "0")) {
                    yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_HTBAYBTG;
                }
            }
        }

        List<DchyXmglYhxx> dchyXmglYhxxList = Lists.newArrayList();
        Example example = new Example(DchyXmglYhxxPz.class);
        example.createCriteria().andEqualTo("id", yhxxpzid);
        List<DchyXmglYhxxPz> xxnrzd = entityMapper.selectByExampleNotNull(example);

        if (CollectionUtils.isNotEmpty(xxnrzd)) {
            for (DchyXmglYhxxPz xxnrzds : xxnrzd) {
                if (StringUtils.isNotEmpty(xmmc)) {
                    xxnr = xxnrzds.getXxnr().replaceAll("项目名称", xmmc);
                } else {
                    xxnr = xxnrzds.getXxnr();
                }
                xxlx = xxnrzds.getXxlx();
                sftz = xxnrzds.getSftz();
            }
        }
        //测绘单位提醒消息
        if (chdwxxList != null) {
            for (Map<String, Object> chdwxxLists : chdwxxList) {
                DchyXmglYhxx dchyXmglYhxx = new DchyXmglYhxx();
                dchyXmglYhxx.setFsyhid(UserUtil.getCurrentUserId());
                dchyXmglYhxx.setFssj(CalendarUtil.getCurHMSDate());
                dchyXmglYhxx.setDqzt(Constants.INVALID);//未读
                dchyXmglYhxx.setYhxxid(UUIDGenerator.generate18());
                String jsyhid = MapUtils.getString(chdwxxLists, "chdwid");
                dchyXmglYhxx.setJsyhid(jsyhid);
                dchyXmglYhxx.setGlsxid(chxmid);
                dchyXmglYhxx.setXxnr(xxnr); //消息内容
                dchyXmglYhxx.setXxlx(xxlx); //消息类型
                dchyXmglYhxx.setSftz(sftz); //是否跳转
                dchyXmglYhxxList.add(dchyXmglYhxx);
            }
        }
        //建设单位提醒消息
        if (StringUtils.isNotBlank(wtdw)) {
            DchyXmglYhxx dchyXmglYhxx = new DchyXmglYhxx();
            dchyXmglYhxx.setFsyhid(UserUtil.getCurrentUserId());
            dchyXmglYhxx.setFssj(CalendarUtil.getCurHMSDate());
            dchyXmglYhxx.setDqzt(Constants.INVALID);//未读
            dchyXmglYhxx.setYhxxid(UUIDGenerator.generate18());
            dchyXmglYhxx.setJsyhid(wtdw);
            dchyXmglYhxx.setGlsxid(chxmid);
            dchyXmglYhxx.setXxnr(xxnr); //消息内容
            dchyXmglYhxx.setXxlx(xxlx); //消息类型
            dchyXmglYhxx.setSftz(sftz); //是否跳转
            dchyXmglYhxxList.add(dchyXmglYhxx);
        }
        return dchyXmglYhxxList;
    }

    @Override
    public Page<Map<String, Object>> getCommissionTask(Map<String, Object> param) {
        Page<Map<String, Object>> resultList = null;
        try {
            Map<String, Object> data = (Map<String, Object>) param.get("data");
            String gcbh = CommonUtil.formatEmptyValue(data.get("gcbh"));
            String gcmc = CommonUtil.formatEmptyValue(data.get("gcmc"));
            String babh = CommonUtil.formatEmptyValue(data.get("babh"));
            String jsdwmc = CommonUtil.formatEmptyValue(data.get("jsdwmc"));
            String chdwmc = CommonUtil.formatEmptyValue(data.get("chdwmc"));
            Map<String, Object> paramMap = Maps.newHashMap();
            paramMap.put("gcbh", gcbh);
            paramMap.put("gcmc", gcmc);
            paramMap.put("xqfbbh", babh);
            paramMap.put("wtdw", jsdwmc);
            paramMap.put("chdwmc", chdwmc);
            int page = Integer.parseInt(CommonUtil.formatEmptyValue(data.get("page")));
            int pageSize = Integer.parseInt(CommonUtil.formatEmptyValue(data.get("pageSize")));

            resultList = repository.selectPaging("queryCommissionTaskByPage", paramMap, page - 1, pageSize);

            if (CollectionUtils.isNotEmpty(resultList.getContent())) {
                for (Map<String, Object> mapTemp : resultList.getContent()) {
                    if (StringUtils.isNotEmpty(CommonUtil.ternaryOperator(mapTemp.get("WTZT")))) {
                        String wtztdm = CommonUtil.ternaryOperator(mapTemp.get("WTZT"));
                        DchyXmglZd zdWtzt = dchyXmglZdService.getDchyXmglByZdlxAndDm("WTZT", wtztdm);
                        if (zdWtzt != null) {
                            mapTemp.put("XMZT", zdWtzt.getMc());
                        }
                    }
                }
            }

        } catch (Exception e) {
            logger.error("错误信息:{}", e);
        }
        return resultList;
    }

    public String obtainXmbh(String chxmid, String wtdw) {
        String xmbh = "";
        String jsdwm = "JSDWBM";
        String cljd = "";
        String xmbhLsh = dchyXmglChxmMapper.queryMaxXmbh();
        if (StringUtils.isNotEmpty(xmbhLsh)) {
            if (xmbhLsh.length() > 4) {
                xmbhLsh = xmbhLsh.substring(xmbhLsh.length() - 4, xmbhLsh.length());
            }
        }

        if (StringUtils.isNotEmpty(wtdw)) {
            jsdwm = ConstructionCodeUtil.getPinYinHeadChar(wtdw);
            Example exampleYhdw = new Example(DchyXmglYhdw.class);
            exampleYhdw.createCriteria().andEqualTo("dwmc", wtdw);
            List<DchyXmglYhdw> yhdwList = entityMapper.selectByExample(exampleYhdw);
            if (CollectionUtils.isNotEmpty(yhdwList)) {
                jsdwm = yhdwList.get(0).getJsdwm();
            } else {
                jsdwm = ConstructionCodeUtil.getPinYinHeadChar(wtdw);
            }
        }

        if (StringUtils.isNotEmpty(chxmid)) {
            Example example = new Example(DchyXmglChxmClsx.class);
            example.createCriteria().andEqualTo("chxmid", chxmid);
            List<DchyXmglChxmClsx> clsxlist = entityMapper.selectByExampleNotNull(example);

            Set<String> set = new HashSet<String>();
            if (CollectionUtils.isNotEmpty(clsxlist)) {
                for (DchyXmglChxmClsx clsxlists : clsxlist) {
                    String clsx = clsxlists.getClsx();
                    DchyXmglZd clsxzd = dchyXmglZdService.getDchyXmglByZdlxAndDm("CLSX", clsx);
                    if (clsxzd != null) {
                        String qtsx = clsxzd.getQtsx();
                        set.add(qtsx);
                    }
                }
                for (Iterator<String> it = set.iterator(); it.hasNext(); ) {
                    cljd += it.next();
                }
            }
        }
        xmbh = CalendarUtil.getCurStrYear() + xmbhLsh + XmbhFormatUtil.numberAfterFillZero(jsdwm, 6) + cljd;
        return xmbh;
    }


}
