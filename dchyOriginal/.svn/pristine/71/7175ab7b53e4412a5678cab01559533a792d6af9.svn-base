package cn.gtmap.msurveyplat.serviceol.core.service.impl;

import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.EntityMapper;
import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.Example;
import cn.gtmap.msurveyplat.common.core.support.mybatis.page.repository.Repository;
import cn.gtmap.msurveyplat.common.domain.dchyxmgl.*;
import cn.gtmap.msurveyplat.common.util.CommonUtil;
import cn.gtmap.msurveyplat.common.util.DataSecurityUtil;
import cn.gtmap.msurveyplat.serviceol.core.service.DchyXmglJsdwService;
import cn.gtmap.msurveyplat.serviceol.core.service.DchyXmglZdService;
import cn.gtmap.msurveyplat.serviceol.core.service.MessagePushService;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.service.PushDataToMqService;
import cn.gtmap.msurveyplat.serviceol.core.xsbfmapper.DchyXmglJsdwXSBFMapper;
import cn.gtmap.msurveyplat.serviceol.utils.Constants;
import cn.gtmap.msurveyplat.serviceol.utils.UserUtil;
import com.google.common.collect.Maps;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.*;

/**
 * @author <a href="mailto:lijun1@gtmap.cn">lijun1</a>
 * @version 1.0, 2020/12/9 13:55
 * @description
 */
@Service
public class DchyXmglJsdwServiceImpl implements DchyXmglJsdwService {

    @Autowired
    private DchyXmglJsdwXSBFMapper jsdwMapper;
    @Autowired
    private DchyXmglZdService dchyXmglZdService;
    @Resource(name = "repositoryXSBF")
    @Autowired
    Repository repositoryXSBF;
    @Autowired
    private EntityMapper entityMapper;
    @Resource(name = "entityMapperXSBF")
    private EntityMapper entityMapperXSBF;
    @Autowired
    PushDataToMqService pushDataToMqService;
    @Autowired
    MessagePushService messagePushService;

    @Override
    public Page<Map<String, Object>> queryXmPjStatusByPage(Map<String, Object> data) {
        int page = Integer.parseInt(data.get("page") != null ? data.get("page").toString() : "1");
        int pageSize = Integer.parseInt(data.get("size") != null ? data.get("size").toString() : "10");
        HashMap<String, Object> map = Maps.newHashMap();
        String gcmc = CommonUtil.ternaryOperator(data.get("gcmc"));
        String chdwmc = CommonUtil.ternaryOperator(data.get("chdwmc"));
        String pjzt = CommonUtil.ternaryOperator(data.get("pjzt"));
        String dwbh = this.getDwhbByCurrentUser(UserUtil.getCurrentUserId());
        List<String> yhidList = this.getYhidsByDwbh(dwbh);
        map.put("gcmc", gcmc.trim());
        map.put("chdwmc", chdwmc.trim());
        map.put("pjzt", pjzt.trim());
        map.put("yhidList", yhidList);
        map.put("wtdw", this.getWtdwByCurrentUser(UserUtil.getCurrentUserId()));
        Page<Map<String, Object>> xmPjPage = repositoryXSBF.selectPaging("queryXmPjStatusByPage", map, page - 1, pageSize);
        DataSecurityUtil.decryptMapList(xmPjPage.getContent());
        return xmPjPage;
    }

    @Override
    @Transactional
    public List<Map<String, Object>> getEvalInfoByProjectId(Map<String, Object> data) {
        //推送消息标识
        int flagChdwxx = 0;
        String chxmId = CommonUtil.ternaryOperator(data.get("chxmid"));
        String fwpj = CommonUtil.ternaryOperator(data.get("fwpj"));
        String pjyj = CommonUtil.ternaryOperator(data.get("pjyj"));
        String chdwxxid = CommonUtil.ternaryOperator(data.get("chdwxxid"));
        List<Map<String, Object>> mapList = jsdwMapper.queryXmPjInfoByChdwId(chxmId.trim(), chdwxxid.trim());
        if (CollectionUtils.isNotEmpty(mapList) && null != mapList.get(0)) {
            Map<String, Object> map = mapList.get(0);
            String pjzt = MapUtils.getString(map, "PJZT");
            String tempFwpj = MapUtils.getString(map, "FWPJ");
            boolean flag = (StringUtils.equals(Constants.VALID, pjzt));//1:已评价
            if (flag) {
                /*已评价，就查看具体评价信息*/
                if (StringUtils.isNotBlank(tempFwpj)) {
                    String pjfw = MapUtils.getString(map, "FWPJ");
                    if (StringUtils.isNotBlank(pjfw)) {
                        DchyXmglZd zdlxAndDm = dchyXmglZdService.getDchyXmglByZdlxAndDm(Constants.DCHY_XMGL_CHXM_FWPJ, pjfw);
                        if (null != zdlxAndDm) {
                            map.put("FWPJMC", zdlxAndDm.getMc());
                        }
                    }
                }
            } else {
                String tempChdwxxid = MapUtils.getString(map, "CHDWXXID");
                DchyXmglChxmChdwxx chdwxx = entityMapperXSBF.selectByPrimaryKey(DchyXmglChxmChdwxx.class, tempChdwxxid);
                /*更新服务评价、评价意见*/
                if (null != chdwxx) {
                    chdwxx.setFwpj(Double.valueOf(fwpj));
                    chdwxx.setPjyj(pjyj);
                    chdwxx.setPjsj(new Date());
                    chdwxx.setPjr(UserUtil.getCurrentUserId());
                    chdwxx.setPjzt(Constants.VALID);//更新状态为已评价
                    flagChdwxx = entityMapperXSBF.saveOrUpdate(chdwxx, chdwxx.getChdwxxid());
                }
                if (flagChdwxx > 0) {
                    /*建设单位评价提醒*/
                    //this.jsdwPjMessageReminder(chxmId, chdwxx.getMlkid() );

                    //用户消息
                    String yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_JSDWPJ;
                    String wtdw = "";
                    String xmmc = "";
                    DchyXmglChxm chxm = entityMapperXSBF.selectByPrimaryKey(DchyXmglChxm.class, chxmId);
                    if (null != chxm) {
                        String chgcid = chxm.getChgcid();
                        if (StringUtils.isNotBlank(chgcid)) {
                            DchyXmglChgc dchyXmglChgc = entityMapperXSBF.selectByPrimaryKey(DchyXmglChgc.class, chgcid);
                            if (null != dchyXmglChgc) {
                                wtdw = dchyXmglChgc.getWtdw();
                                xmmc = dchyXmglChgc.getGcmc();
                            }
                        }
                    }
                    Map<String, Object> paramMap = Maps.newHashMap();
                    paramMap.put("yhxxpzid", yhxxpzid);
                    paramMap.put("jsyhid", chdwxx.getMlkid());
                    paramMap.put("glsxid", chxmId);
                    paramMap.put("xmmc", xmmc);
                    paramMap.put("jsdwmc", wtdw);
                    messagePushService.updateYhxxInfo(paramMap);

                    pushDataToMqService.pushXmpjMsgToMq(chxmId);
                }
            }
        }
        return mapList;
    }


    @Override
    public Map<String, Object> checkChxmIsFinish(Map<String, Object> data) {
        String chxmId = CommonUtil.ternaryOperator(data.get("chxmid"));
        Map<String, Object> map = new HashMap<>();
        /*判断该项目是否已办结，若未办结则不允许评价*/
        DchyXmglChxm chxm = entityMapperXSBF.selectByPrimaryKey(DchyXmglChxm.class, chxmId);
        if (null != chxm) {
            /*99：已办结*/
            if (StringUtils.equals("99", chxm.getXmzt())) {
                map.put("msg", "success");
            } else {
                map.put("msg", "fail");
            }
        }
        return map;
    }

    /**
     * 获取当前用户的mlkid
     *
     * @param userid
     * @return
     */
    private String getMlkIdByCurrentUser(String userid) {
        Example example = new Example(DchyXmglYhdw.class);
        example.createCriteria().andEqualTo("yhid", userid);
        List<DchyXmglYhdw> yhdwList = entityMapper.selectByExample(example);
        if (CollectionUtils.isNotEmpty(yhdwList)) {
            String dwbh = yhdwList.get(0).getDwbh();
            if (StringUtils.isNotBlank(dwbh)) {
                /*根据用户单位获取对应名录库*/
                Example mlkExample = new Example(DchyXmglMlk.class);
                mlkExample.createCriteria().andEqualTo("dwbh", dwbh);
                List<DchyXmglMlk> mlks = entityMapper.selectByExample(mlkExample);
                if (CollectionUtils.isNotEmpty(mlks)) {
                    DchyXmglMlk mlk = mlks.get(0);
                    if (null != mlk) {
                        return mlk.getMlkid();
                    }
                }
            }
        }
        return "";
    }

    /**
     * 根据当前用户获取委托单位
     *
     * @param userid
     * @return
     */
    private String getWtdwByCurrentUser(String userid) {
        Example example = new Example(DchyXmglYhdw.class);
        example.createCriteria().andEqualTo("yhid", userid);
        List<DchyXmglYhdw> dchyXmglYhdwList = entityMapper.selectByExampleNotNull(example);
        if (CollectionUtils.isNotEmpty(dchyXmglYhdwList)) {
            DchyXmglYhdw yhdw = dchyXmglYhdwList.get(0);
            if (null != yhdw) {
                String dwmc = yhdw.getDwmc();
                if (StringUtils.isNotBlank(dwmc)) {
                    return dwmc;
                }
            }
        }
        return "";
    }

    /**
     * 获取当前用户单位编号
     */
    private String getDwhbByCurrentUser(String userid) {
        Example example = new Example(DchyXmglYhdw.class);
        example.createCriteria().andEqualTo("yhid", userid);
        List<DchyXmglYhdw> yhdwList = entityMapper.selectByExample(example);
        if (CollectionUtils.isNotEmpty(yhdwList)) {
            String dwbh = yhdwList.get(0).getDwbh();
            if (StringUtils.isNotBlank(dwbh)) {
                return dwbh;
            }
        }
        return "";
    }

    /**
     * 通过单位编号获取用户id集合
     *
     * @param dwbh
     * @return
     */
    private List<String> getYhidsByDwbh(String dwbh) {
        Example yhdwExample = new Example(DchyXmglYhdw.class);
        List<String> list = new ArrayList<>();
        yhdwExample.createCriteria().andEqualTo("dwbh", dwbh);
        List<DchyXmglYhdw> yhdwList = entityMapper.selectByExample(yhdwExample);
        if (CollectionUtils.isNotEmpty(yhdwList)) {
            for (DchyXmglYhdw yhdw : yhdwList) {
                if (null != yhdw && StringUtils.isNotBlank(yhdw.getYhid())) {
                    list.add(yhdw.getYhid());
                }
            }
        }
        return list;
    }

}
