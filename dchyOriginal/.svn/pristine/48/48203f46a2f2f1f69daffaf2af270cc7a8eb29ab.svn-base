package cn.gtmap.msurveyplat.promanage.core.service.mq.receive;

import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.EntityMapper;
import cn.gtmap.msurveyplat.common.domain.DchyXmglTjfxDto;
import cn.gtmap.msurveyplat.common.domain.dchyxmgl.DchyXmglMqCzrz;
import cn.gtmap.msurveyplat.common.util.CalendarUtil;
import cn.gtmap.msurveyplat.promanage.core.mapper.MqMsgMapper;
import cn.gtmap.msurveyplat.promanage.core.service.mq.service.PushDataToMqService;
import cn.gtmap.msurveyplat.promanage.utils.Constants;
import cn.gtmap.msurveyplat.promanage.web.utils.EhcacheUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Maps;
import com.gtis.common.util.UUIDGenerator;
import com.rabbitmq.client.Channel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.ChannelAwareMessageListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;

/**
 * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
 * @description 接收来自办事大厅的统计分析结果
 * @time 2021/04/21 17:04
 */
@Service
public class ReceiveTjfxFromBsdtServiceImpl implements ChannelAwareMessageListener {

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Resource(name = "entityMapper")
    private EntityMapper entityMapper;
    @Autowired
    private MqMsgMapper mqMsgMapper;
    @Autowired
    private PushDataToMqService pushDataToMqService;


    @Override
    @RabbitListener(queues = Constants.BSDT_XMGL_TJFX_QUEUE)
    @Transactional(propagation = Propagation.REQUIRED)
    public void onMessage(Message message, Channel channel) {
        try {
            byte[] bytes = message.getBody();
            String str = new String(bytes, "UTF-8");
            logger.info(str);
            // TODO 业务处理
            saveTjfx(str);
            basicACK(message, channel); //正常消费掉后通知mq服务器移除此条mq
            logger.info("统计分析接收成功");
        } catch (UnsupportedEncodingException e) {
            basicReject(message, channel);
            logger.error("接收失败", e);
        } catch (Exception e) {
//            e.printStackTrace();
            logger.error("接收失败", e);
        }
    }

    //正常消费掉后通知mq服务器移除此条mq
    private void basicACK(Message message, Channel channel) {
        try {
            channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);
        } catch (IOException e) {
            logger.error("通知服务器移除mq时异常，异常信息：" + e);
        }
    }

    //处理异常，mq重回队列
    private void basicNACK(Message message, Channel channel) {
        try {
            channel.basicNack(message.getMessageProperties().getDeliveryTag(), false, true);
        } catch (IOException e) {
            logger.error("mq重新进入服务器时出现异常，异常信息：" + e);
        }
    }

    //处理异常，mq重回队列
    private void basicReject(Message message, Channel channel) {
        try {
            channel.basicReject(message.getMessageProperties().getDeliveryTag(), false);
        } catch (IOException e) {
            logger.error("mq重新进入服务器时出现异常，异常信息：" + e);
        }
    }

    //统计分析数据推送
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveTjfx(String str) throws Exception {
        DchyXmglMqCzrz dchyXmglMqCzrz = new DchyXmglMqCzrz();
        try {
            dchyXmglMqCzrz.setCzrzid(UUIDGenerator.generate18());
            dchyXmglMqCzrz.setCzsj(CalendarUtil.getCurHMSDate());
            dchyXmglMqCzrz.setMsg(str.getBytes("utf-8"));
            JSONObject slxxJson = JSONObject.parseObject(str);
            DchyXmglTjfxDto dchyXmglTjfxDto = JSON.toJavaObject(slxxJson, DchyXmglTjfxDto.class);

            String key = dchyXmglTjfxDto.getKey();

            logger.info("*************************************输出*****************************************" + str);
            logger.info("*************************************输出*****************************************key:" + key);
            List<Map> xmslbyqxList = dchyXmglTjfxDto.getXmslbyqxList();

            //返回结果塞进缓存
            Map resultMap = Maps.newHashMap();
            resultMap.put("xmslbyqxList",xmslbyqxList);
            EhcacheUtil.putDataToEhcache(key , resultMap);


        } catch (Exception e) {
            logger.error("数据库入库失败:" + e);
            dchyXmglMqCzrz.setSbyy(e.toString());
            entityMapper.saveOrUpdate(dchyXmglMqCzrz, dchyXmglMqCzrz.getCzrzid());
            throw new Exception();
        }
    }

}
