package cn.gtmap.msurveyplat.serviceol.core.service.mq.service.Impl;

import cn.gtmap.msurveyplat.common.domain.DchyXmglTjfxDto;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.model.JsdwFbwtModel;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.model.JsdwFbxfwModel;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.model.MlkxxModel;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.send.*;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.service.JsdwPjService;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.service.KpxxService;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.service.PushDataToMqService;
import cn.gtmap.msurveyplat.serviceol.utils.Constants;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Maps;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;

/**
 * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
 * @version 1.0, 2020/12/13
 * @description TODO
 */
@Service
public class PushDataToMqServiceImpl implements PushDataToMqService {

    @Autowired
    private SendXsxmxxToXmglServiceImpl sendXsxmxxToXmglService;

    @Autowired
    private SendXmxgxxToXmglServiceImpl sendXmxgxxToXmglService;

    @Autowired
    private SendCgjcQqToXmglServiceImpl sendCgjcQqToXmglService;

    @Autowired
    private SendCgtjQqToXmglServiceImpl sendCgtjQqToXmglService;

    @Autowired
    private JsdwPjService jsdwPjService;

    @Autowired
    SendZxbjToXmglServiceImpl sendZxbjToXmglService;

    @Autowired
    SendXsxmwjToXmglServiceImpl sendXsxmwjToXmglService;

    @Autowired
    private KpxxService kpxxService;

    @Autowired
    private MlkxxServiceImpl mlkxxService;

    @Autowired
    private JsdwFbxfwServiceImpl jsdwFbxfwService;

    @Autowired
    private JsdwFbwtServiceImpl jsdwFbwtService;

    @Autowired
    private JcsjsqServiceImpl jcsjsqService;

    @Autowired
    private MlkClsxGxServiceImpl mlkClsxGxService;

    @Autowired
    private SendJcsjToXmglServiceImpl sendJcsjToXmglService;

    @Autowired
    private SendXxtxToXmglServiceImpl sendXxtxToXmglService;

    @Autowired
    private SendTjfxToXmglServiceImpl sendTjfxToXmglService;

    @Override
    public void pushMlkMsgToMq(String mlkid, String sqxxid) {
        Map param = Maps.newHashMap();
        if (StringUtils.isNoneBlank(mlkid)) {
            param.put("mlkid", mlkid);
        }
        if (StringUtils.isNoneBlank(sqxxid)) {
            param.put("sqxxid", sqxxid);
        }
        String messageMlkxx = JSONObject.toJSONString(mlkxxService.getAllData(param));

        //名录库入驻数据   线上-->线下
        sendXmxgxxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_FWPJ_QUEUE_ROUTINGKEY, messageMlkxx);
    }

    @Override
    public void pushKpMsgToMq(String mlkid) {
        if (StringUtils.isNoneBlank(mlkid)) {
            String messageChxm = JSONObject.toJSONString(kpxxService.getAllData(mlkid));
            //管理单位考评数据   线上-->线下
            sendXmxgxxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_FWPJ_QUEUE_ROUTINGKEY, messageChxm);
        }
    }

    @Override
    public void pushJsdwPjMsgToMq(String chxmid) {
        if (StringUtils.isNoneBlank(chxmid)) {
            String messageChxm = JSONObject.toJSONString(jsdwPjService.getAllData(chxmid));
            //建设单位评价测绘单位数据  线上备份-->线下
            sendXsxmxxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_XMFB_QUEUE_ROUTINGKEY, messageChxm);
        }
    }

    @Override
    public void pushXmpjMsgToMq(String chxmid) {
        if (StringUtils.isNoneBlank(chxmid)) {
            String messageChxm = JSONObject.toJSONString(jsdwPjService.getAllData(chxmid));
            //建设单位评价测绘单位数据  线上备份-->线下
            sendZxbjToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_ZXBJ_QUEUE_ROUTINGKEY, messageChxm);
        }
    }


    @Override
    public void pushJsdwFbfwMsgToMq(String chxmidSaveOrUpdate, JsdwFbxfwModel jsdwFbxfwModelDelete) {
        Map param = Maps.newHashMap();
        if (StringUtils.isNoneBlank(chxmidSaveOrUpdate)) {
            param.put("chxmidSaveOrUpdate", chxmidSaveOrUpdate);
        }

        if (null != jsdwFbxfwModelDelete) {
            param.put("chxmidDelete", jsdwFbxfwModelDelete);
        }

        if (param.size() > 0) {
            String messageChxm = JSONObject.toJSONString(jsdwFbxfwService.getAllData(param));
            //建设单位发布新服务  线上备份-->线下
            sendXsxmxxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_XMFB_QUEUE_ROUTINGKEY, messageChxm);
        }

    }

    @Override
    public void pushJsdwFbwtMsgToMq(String chxmidSaveOrUpdate, JsdwFbwtModel jsdwFbwtModelDelete) {
        Map param = Maps.newHashMap();
        if (StringUtils.isNoneBlank(chxmidSaveOrUpdate)) {
            param.put("chxmidSaveOrUpdate", chxmidSaveOrUpdate);
        }

        if (null != jsdwFbwtModelDelete) {
            param.put("chxmidDelete", jsdwFbwtModelDelete);
        }

        if (param.size() > 0) {
            String messageChxm = JSONObject.toJSONString(jsdwFbwtService.getAllData(param));
            //建设单位发布新服务
            sendXsxmxxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_XMFB_QUEUE_ROUTINGKEY, messageChxm);
        }

    }

    @Override
    public void pushSfdjMlkMsgToMq(String mlkid, MlkxxModel mlkxxModel) {
        Map param = Maps.newHashMap();
        if (StringUtils.isNotBlank(mlkid)) {
            param.put("mlkSaveOrUpdate", mlkid);
            String messageJcsjsqxx = JSONObject.toJSONString(mlkxxService.getSingleData(mlkid));

            //名录库冻结数据   线上-->线下
            sendXmxgxxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_FWPJ_QUEUE_ROUTINGKEY, messageJcsjsqxx);
        }
    }

//    @Override
//    public void pushJcsjsqMsgToMq(String msg) {
//        if (StringUtils.isNotBlank(msg)) {
//            //名录库入驻数据   线上-->线下
//            sendXmxgxxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_FWPJ_QUEUE_ROUTINGKEY, msg);
//        }
//    }

    @Override
    public void pushCgjcMsgToMq(String msg) {
        if (StringUtils.isNotBlank(msg)) {
            //测量成果包  线上到线下
            sendCgjcQqToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_CGJC_QUEUE_ROUTINGKEY, msg);
        }
    }

    @Override
    public void pushCgtjToMq(String msg) {
        if (StringUtils.isNotBlank(msg)) {
            //测量成果包  线上到线下
            sendCgtjQqToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_CGTJ_QUEUE_ROUTINGKEY, msg);
        }
    }

    @Override
    public void pushMsgToMq(String msg) {
        if (StringUtils.isNotBlank(msg)) {
            //合同信息  线上到线下
            sendXmxgxxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_XMFB_QUEUE_ROUTINGKEY, msg);
        }
    }

    /**
     * 线上办结推线下处理
     *
     * @param msg
     */
    @Override
    public void pushOnlineCompleteToXx(String msg) {
        if (StringUtils.isNotBlank(msg)) {
            sendZxbjToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_ZXBJ_QUEUE_ROUTINGKEY, msg);
        }
    }

    @Override
    public void pushOnlineWjFileToxx(String msg) {
        if (StringUtils.isNotBlank(msg)) {
            sendXsxmwjToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_TSWJ_QUEUE_ROUTINGKEY, msg);
        }
    }

    @Override
    public void pushJcsjMsgToMq(String msg) {
        if (StringUtils.isNotBlank(msg)) {
            sendJcsjToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_JCSJ_QUEUE_ROUTINGKEY, msg);
        }
    }

    @Override
    public void pushXxtxMsgToMq(String msg) {
        if (StringUtils.isNotBlank(msg)) {
            sendXxtxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_XXTX_QUEUE_ROUTINGKEY, msg);
        }
    }

    @Override
    public void pushTjfxMsgToMq(DchyXmglTjfxDto dchyXmglTjfxDto) {
        if (null != dchyXmglTjfxDto) {
            sendTjfxToXmglService.sendDirectMsg(Constants.BSDT_XMGL_DIRECT_EXCHANGE, Constants.BSDT_XMGL_TJFX_QUEUE_ROUTINGKEY, dchyXmglTjfxDto);
        }
    }
}
