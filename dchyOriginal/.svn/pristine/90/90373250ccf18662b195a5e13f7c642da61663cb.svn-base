package cn.gtmap.msurveyplat.promanage.core.service.impl;


import cn.gtmap.msurveyplat.common.annotion.SystemLog;
import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.EntityMapper;
import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.Example;
import cn.gtmap.msurveyplat.common.core.support.mybatis.page.repository.Repository;
import cn.gtmap.msurveyplat.common.domain.dchyxmgl.*;
import cn.gtmap.msurveyplat.common.dto.*;
import cn.gtmap.msurveyplat.common.util.*;
import cn.gtmap.msurveyplat.promanage.aop.LogAspect;
import cn.gtmap.msurveyplat.promanage.core.mapper.DchyXmglChxmClsxMapper;
import cn.gtmap.msurveyplat.promanage.core.mapper.DchyXmglChxmMapper;
import cn.gtmap.msurveyplat.promanage.core.service.CommissionFilingService;
import cn.gtmap.msurveyplat.promanage.core.service.DchyXmglZdService;
import cn.gtmap.msurveyplat.promanage.core.service.MessagePushService;
import cn.gtmap.msurveyplat.promanage.core.service.mq.service.PushDataToMqService;
import cn.gtmap.msurveyplat.promanage.utils.Constants;
import cn.gtmap.msurveyplat.promanage.utils.UserUtil;
import com.alibaba.fastjson.JSON;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.gtis.common.util.UUIDGenerator;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.Consts;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author <a href="mailto:lijingmo@gtmap.cn">lijingmo</a>
 * @version 1.o, 2020-12-09
 * description
 */
@Service
public class CommissionFilingServiceImpl implements CommissionFilingService {

    @Autowired
    PushDataToMqService pushDataToMqService;

    @Autowired
    DchyXmglChxmMapper dchyXmglChxmMapper;

    @Autowired
    DchyXmglZdService dchyXmglZdService;

    @Autowired
    EntityMapper entityMapper;

    @Autowired
    Repository repository;

    @Autowired
    MessagePushService messagePushService;

    private Logger logger = LoggerFactory.getLogger(CommissionFilingServiceImpl.class);

    @Override
    @Transactional
    @SystemLog(czmkMc = ProLog.CZMK_DBXX_MC, czmkCode = ProLog.CZMK_DBXX_CODE, czlxMc = ProLog.CZLX_SAVE_MC, czlxCode = ProLog.CZLX_SAVE_CODE)
    public boolean reviewCommission(Map<String, Object> map) {
        logger.info("****************************线下备案审核后推送线上备份开始********************************");
        DchyXmglChxmDto dchyXmglChxmDto = new DchyXmglChxmDto();
        //消息提醒推送
        DchyXmglXxtxDto dchyXmglXxtxDto = new DchyXmglXxtxDto();
        //Map<String, Object> data = (Map<String, Object>) map.get("data");
        String chxmid = CommonUtil.formatEmptyValue(map.get("chxmid"));
        String sftg = CommonUtil.formatEmptyValue(map.get("sftg"));
        String gcmc = CommonUtil.formatEmptyValue(map.get("gcmc"));
        String wtdw = CommonUtil.formatEmptyValue(map.get("wtdw"));
        try {
            //备案审核通过
            if (StringUtils.equals(sftg, Constants.SHTG)) {
                logger.info("********************************审核通过***************************************");
                List<DchyXmglYbrw> dchyXmglYbrwList = Lists.newArrayList();
                List<DchyXmglSqxx> dchyXmglSqxxList = Lists.newArrayList();
                List<DchyXmglSjcl> dchyXmglSjclList = Lists.newArrayList();
                List<DchyXmglSjxx> dchyXmglSjxxList = Lists.newArrayList();

                //测绘项目更改项目信息，并组织同步数据
                String slr = UserUtil.getCurrentUserId();
                Date slsj = new Date();
                DchyXmglChxm dchyXmglChxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
                dchyXmglChxm.setSlr(slr);
                dchyXmglChxm.setSlsj(slsj);
                dchyXmglChxm.setChxmid(chxmid);
                dchyXmglChxm.setXmzt(Constants.DCHY_XMGL_CHXM_XMZT_YSL);
                //判断是否为线上委托部分
                String wtzt = dchyXmglChxm.getWtzt();
                if (StringUtils.isNotBlank(wtzt)) {
                    dchyXmglChxm.setWtzt(Constants.WTZT_YBA); //委托状态已备案
                    logger.info("*******************************更新委托状态为已备案，委托状态：" + dchyXmglChxm.getWtzt() + "**********************************");
                }
                entityMapper.saveOrUpdate(dchyXmglChxm, dchyXmglChxm.getChxmid());

                //测绘工程组织同步数据
                Example chgcExample = new Example(DchyXmglChgc.class);
                chgcExample.createCriteria().andEqualTo("chgcid", dchyXmglChxm.getChgcid());
                List<DchyXmglChgc> chgcList = entityMapper.selectByExampleNotNull(chgcExample);
                if (CollectionUtils.isNotEmpty(chgcList)) {
                    for (DchyXmglChgc chgcLists : chgcList) {
                        dchyXmglChxmDto.setDchyXmglChgc(chgcLists);
                    }
                }

                //测绘项目测量事项组织同步数据
                Example chxmClsxExample = new Example(DchyXmglChxmClsx.class);
                chxmClsxExample.createCriteria().andEqualTo("chxmid", chxmid);
                List<DchyXmglChxmClsx> dchyXmglChxmClsxList = entityMapper.selectByExampleNotNull(chxmClsxExample);

                //测绘项目测绘单位组织同步数据
                Example chxmChdwxxExample = new Example(DchyXmglChxmChdwxx.class);
                chxmChdwxxExample.createCriteria().andEqualTo("chxmid", chxmid);
                List<DchyXmglChxmChdwxx> dchyXmglChxmChdwxxList = entityMapper.selectByExampleNotNull(chxmChdwxxExample);

                //收件信息组织同步数据
                Example dchyXmglSjxxExample = new Example(DchyXmglSjxx.class);
                dchyXmglSjxxExample.createCriteria().andEqualTo("glsxid", chxmid);
                List<DchyXmglSjxx> olddchyXmglSjxxList = entityMapper.selectByExampleNotNull(dchyXmglSjxxExample);
                if (CollectionUtils.isNotEmpty(olddchyXmglSjxxList)) {
                    for (DchyXmglSjxx olddchyXmglSjxxLists : olddchyXmglSjxxList) {
                        dchyXmglSjxxList.add(olddchyXmglSjxxLists);
                        String sjxxid = olddchyXmglSjxxLists.getSjxxid();
                        //收件材料组织同步数据
                        Example dchyXmglSjclexample = new Example(DchyXmglSjcl.class);
                        dchyXmglSjclexample.createCriteria().andEqualTo("sjxxid", sjxxid);
                        dchyXmglSjclList = entityMapper.selectByExampleNotNull(dchyXmglSjclexample);
                    }
                }

                //合同信息组织同步数据
                List<DchyXmglHtxxDto> dchyXmglHtxxDtoList = generateHtxxs(chxmid);

                //根据chxmid获取当前待办任务的dbrwid，备案后转为已办任务
                String dbrwid = null;
                Example sqxxExample = new Example(DchyXmglSqxx.class);
                sqxxExample.createCriteria().andEqualTo("glsxid", chxmid);
                List<DchyXmglSqxx> sqxxList = entityMapper.selectByExampleNotNull(sqxxExample);
                if (CollectionUtils.isNotEmpty(sqxxList)) {
                    for (DchyXmglSqxx sqxxLists : sqxxList) {
                        String sqxxid = sqxxLists.getSqxxid();
                        Example dbrwExample = new Example(DchyXmglDbrw.class);
                        dbrwExample.createCriteria().andEqualTo("sqxxid", sqxxid);
                        List<DchyXmglDbrw> dbrwList = entityMapper.selectByExampleNotNull(dbrwExample);
                        if (CollectionUtils.isNotEmpty(dbrwList)) {
                            for (DchyXmglDbrw dbrwLists : dbrwList) {
                                dbrwid = dbrwLists.getDbrwid();

                                boolean shtg = StringUtils.equalsIgnoreCase(sftg, "1");
                                String shyj = CommonUtil.formatEmptyValue(map.get("shyj"));
                                /*新生成一条已办数据*/
                                DchyXmglYbrw dchyXmglYbrw = new DchyXmglYbrw();
                                dchyXmglYbrw.setBlryid(UserUtil.getCurrentUserId());
                                dchyXmglYbrw.setBlyj(shyj);
                                dchyXmglYbrw.setJssj(new Date());
                                dchyXmglYbrw.setSqxxid(sqxxid);
                                dchyXmglYbrw.setBljg(shtg ? Constants.INVALID : Constants.VALID);
                                dchyXmglYbrw.setDqjd(dbrwLists.getDqjd());
                                dchyXmglYbrw.setZrsj(dbrwLists.getZrsj());
                                dchyXmglYbrw.setYbrwid(dbrwLists.getDbrwid());

                                /*保存已办任务*/
                                entityMapper.saveOrUpdate(dchyXmglYbrw, dchyXmglYbrw.getYbrwid());
                                dchyXmglYbrwList.add(dchyXmglYbrw);

                                DchyXmglSqxx dchyXmglSqxx = entityMapper.selectByPrimaryKey(DchyXmglSqxx.class, sqxxid);
                                if (shtg) {
                                    dchyXmglSqxx.setSqzt(Constants.DCHY_XMGL_SQZT_TH);
                                } else {
                                    dchyXmglSqxx.setSqzt(Constants.DCHY_XMGL_SQZT_SHTG);
                                }
                                int sqxx = entityMapper.saveOrUpdate(dchyXmglSqxx, sqxxid);
                                dchyXmglSqxxList.add(dchyXmglSqxx);

                                if (StringUtils.isNotEmpty(dbrwid)) {
                                    //删除待办任务
                                    entityMapper.deleteByPrimaryKey(DchyXmglDbrw.class, dbrwid);
                                }
                            }
                        }
                    }
                }

                dchyXmglChxmDto.setDchyXmglChxm(dchyXmglChxm);
                dchyXmglChxmDto.setDchyXmglChxmChdwxxList(dchyXmglChxmChdwxxList);
                dchyXmglChxmDto.setDchyXmglSjclList(dchyXmglSjclList);
                dchyXmglChxmDto.setDchyXmglSjxxList(dchyXmglSjxxList);
                dchyXmglChxmDto.setDchyXmglChxmClsxList(dchyXmglChxmClsxList);
                dchyXmglChxmDto.setDchyXmglYbrwList(dchyXmglYbrwList);
                dchyXmglChxmDto.setDchyXmglSqxxList(dchyXmglSqxxList);
                dchyXmglChxmDto.setDchyXmglHtxxDtoList(dchyXmglHtxxDtoList);
            } else if (StringUtils.equals(sftg, Constants.SHBTG)) {
                logger.info("************************************审核不通过*****************************************");
                //测绘项目更改项目信息，并组织同步数据
                String slr = UserUtil.getCurrentUserId();
                Date slsj = new Date();
                DchyXmglChxm dchyXmglChxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
                dchyXmglChxm.setSlr(slr);
                dchyXmglChxm.setSlsj(slsj);
                dchyXmglChxm.setChxmid(chxmid);
                dchyXmglChxm.setXmzt(Constants.DCHY_XMGL_CHXM_XMZT_YSL);
                //判断是否为线上委托部分
                String wtzt = dchyXmglChxm.getWtzt();
                if (StringUtils.isNotEmpty(wtzt)) {
                    dchyXmglChxm.setWtzt(Constants.WTZT_YTH); //委托状态已退回
                    logger.info("*****************************更新委托状态为已退回，委托状态:" + dchyXmglChxm.getWtzt() + "*************************************");
                }
                entityMapper.saveOrUpdate(dchyXmglChxm, dchyXmglChxm.getChxmid());
                dchyXmglChxmDto.setDchyXmglChxm(dchyXmglChxm);
            }

            //用户消息
            List<Map<String, Object>> chdwxxList = (List<Map<String, Object>>) map.get("chdwxx");
            List<DchyXmglYhxx> yhxxList = this.generateYhxx(gcmc, wtdw, chxmid, sftg, chdwxxList);
            //组织用户消息数据同步
//            dchyXmglChxmDto.setDchyXmglYhxxList(yhxxList);
            dchyXmglXxtxDto.setDchyXmglYhxxList(yhxxList);

            Map<String, Object> resultMap = new HashMap<>();
            Map<String, Object> resultMapXxtx = new HashMap<>();
            resultMap.put("saveOrUpdate", dchyXmglChxmDto);
            resultMapXxtx.put("saveOrUpdate", dchyXmglXxtxDto);
            pushDataToMqService.pushSlxxMsgToMq(JSON.toJSONString(resultMap));
            pushDataToMqService.pushXxtxResultTo(JSON.toJSONString(resultMapXxtx));
            logger.info(dchyXmglChxmDto.toString());
            logger.info("*********************************线下备案审核推送线上备份结束***********************************");
            return true;
        } catch (Exception e) {
            DchyXmglChxmDto failDchyXmglChxmDto = new DchyXmglChxmDto();
            DchyXmglXxtxDto failDchyXmglXxtxDto = new DchyXmglXxtxDto();
            DchyXmglChxm dchyXmglChxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
            dchyXmglChxm.setWtzt(Constants.WTZT_CXBA);
            failDchyXmglChxmDto.setDchyXmglChxm(dchyXmglChxm);

            //失败消息
            List<Map<String, Object>> chdwxxList = (List<Map<String, Object>>) map.get("chdwxx");
            List<DchyXmglYhxx> yhxxList = this.generateYhxx(gcmc, wtdw, chxmid, "0", chdwxxList);
            failDchyXmglXxtxDto.setDchyXmglYhxxList(yhxxList);
            Map<String, Object> resultMap = new HashMap<>();
            Map<String, Object> failResultMap = new HashMap<>();
            resultMap.put("saveOrUpdate", failDchyXmglChxmDto);
            failResultMap.put("saveOrUpdate", failDchyXmglXxtxDto);
            pushDataToMqService.pushSlxxMsgToMq(JSON.toJSONString(resultMap));
            pushDataToMqService.pushXxtxResultTo(JSON.toJSONString(failResultMap));
            logger.error("错误原因{}", e);
            return false;
        }
    }


    private List<DchyXmglHtxxDto> generateHtxxs(String chxmid) {
        List<DchyXmglHtxxDto> dchyXmglHtxxDtoList = Lists.newArrayList();
        DchyXmglHtxxDto dchyXmglHtxxDto = new DchyXmglHtxxDto();

        List<DchyXmglHtxx> dchyXmglHtxxList = Lists.newArrayList();
        List<DchyXmglHtxxChdwxxGx> dchyXmglHtxxChdwxxGxList = Lists.newArrayList();
        List<DchyXmglClsxHtxxGx> dchyXmglClsxHtxxGxList = Lists.newArrayList();
        List<DchyXmglClsxChdwxxGx> dchyXmglClsxChdwxxGxList = Lists.newArrayList();
        List<DchyXmglSjxx> dchyXmglSjxxList = Lists.newArrayList();
        List<DchyXmglSjcl> dchyXmglSjclList = Lists.newArrayList();

        //合同信息拆分，并组织数据同步
        Example dchyXmglHtxxExample = new Example(DchyXmglHtxx.class);
        dchyXmglHtxxExample.createCriteria().andEqualTo("chxmid", chxmid);
        List<DchyXmglHtxx> oldDchyXmglHtxxList = entityMapper.selectByExampleNotNull(dchyXmglHtxxExample);
        if (CollectionUtils.isNotEmpty(oldDchyXmglHtxxList)) {
            for (DchyXmglHtxx oldDchyXmglHtxxLists : oldDchyXmglHtxxList) {
                dchyXmglHtxxList.add(oldDchyXmglHtxxLists);
                String htxxid = oldDchyXmglHtxxLists.getHtxxid();
                //测量事项合同信息拆分，并组织数据同步
                Example dchyXmglClsxHtxxGxExample = new Example(DchyXmglClsxHtxxGx.class);
                dchyXmglClsxHtxxGxExample.createCriteria().andEqualTo("htxxid", htxxid);
                List<DchyXmglClsxHtxxGx> oldDchyXmglClsxHtxxGxList = entityMapper.selectByExampleNotNull(dchyXmglClsxHtxxGxExample);
                if (CollectionUtils.isNotEmpty(oldDchyXmglClsxHtxxGxList)) {
                    for (DchyXmglClsxHtxxGx oldDchyXmglClsxHtxxGxLists : oldDchyXmglClsxHtxxGxList) {
                        dchyXmglClsxHtxxGxList.add(oldDchyXmglClsxHtxxGxLists);
                    }
                }

                //收件信息拆分，并组织同步数据
                Example dchyXmglSjxxExample = new Example(DchyXmglSjxx.class);
                dchyXmglSjxxExample.createCriteria().andEqualTo("glsxid", htxxid);
                List<DchyXmglSjxx> oldDchyXmglSjxxList = entityMapper.selectByExampleNotNull(dchyXmglSjxxExample);
                if (CollectionUtils.isNotEmpty(oldDchyXmglSjxxList)) {
                    for (DchyXmglSjxx oldDchyXmglSjxxLists : oldDchyXmglSjxxList) {
                        String sjxxid = oldDchyXmglSjxxLists.getSjxxid();
                        dchyXmglSjxxList.add(oldDchyXmglSjxxLists);

                        //收件材料拆分，并组织同步数据
                        Example dchyXmglSjclexample = new Example(DchyXmglSjcl.class);
                        dchyXmglSjclexample.createCriteria().andEqualTo("sjxxid", sjxxid);
                        List<DchyXmglSjcl> oldDchyXmglSjclList = entityMapper.selectByExampleNotNull(dchyXmglSjclexample);
                        if (CollectionUtils.isNotEmpty(oldDchyXmglSjclList)) {
                            for (DchyXmglSjcl oldDchyXmglSjclLists : oldDchyXmglSjclList) {
                                dchyXmglSjclList.add(oldDchyXmglSjclLists);
                            }
                        }
                    }
                }
            }
        }

        //测绘单位合同信息拆分，并组织数据同步
        //目前一个测绘项目暂时只能选择一家测绘单位
        Example dchyXmglHtxxChdwxxGxExample = new Example(DchyXmglHtxxChdwxxGx.class);
        dchyXmglHtxxChdwxxGxExample.createCriteria().andEqualTo("chxmid", chxmid);
        List<DchyXmglHtxxChdwxxGx> oldDchyXmglHtxxChdwxxGxList = entityMapper.selectByExampleNotNull(dchyXmglHtxxChdwxxGxExample);
        if (CollectionUtils.isNotEmpty(oldDchyXmglHtxxChdwxxGxList)) {
            for (DchyXmglHtxxChdwxxGx oldDchyXmglHtxxChdwxxGxLists : oldDchyXmglHtxxChdwxxGxList) {
                dchyXmglHtxxChdwxxGxList.add(oldDchyXmglHtxxChdwxxGxLists);
            }
        }

        //测量事项测绘单位拆分，并组织数据同步
        //目前一个测绘项目暂时只能选择一家测绘单位
        Example dchyXmglClsxChdwxxGxExample = new Example(DchyXmglClsxChdwxxGx.class);
        dchyXmglClsxChdwxxGxExample.createCriteria().andEqualTo("chxmid", chxmid);
        List<DchyXmglClsxChdwxxGx> oldDchyXmglClsxChdwxxGxList = entityMapper.selectByExampleNotNull(dchyXmglClsxChdwxxGxExample);
        if (CollectionUtils.isNotEmpty(oldDchyXmglClsxChdwxxGxList)) {
            for (DchyXmglClsxChdwxxGx oldDchyXmglClsxChdwxxGxLists : oldDchyXmglClsxChdwxxGxList) {
                dchyXmglClsxChdwxxGxList.add(oldDchyXmglClsxChdwxxGxLists);
            }
        }
        dchyXmglHtxxDto.setDchyXmglHtxxList(dchyXmglHtxxList);
        dchyXmglHtxxDto.setDchyXmglHtxxChdwxxGxList(dchyXmglHtxxChdwxxGxList);
        dchyXmglHtxxDto.setDchyXmglClsxChdwxxGxList(dchyXmglClsxChdwxxGxList);
        dchyXmglHtxxDto.setDchyXmglClsxHtxxGxList(dchyXmglClsxHtxxGxList);
        dchyXmglHtxxDto.setDchyXmglSjclList(dchyXmglSjclList);
        dchyXmglHtxxDto.setDchyXmglSjxxList(dchyXmglSjxxList);
        dchyXmglHtxxDtoList.add(dchyXmglHtxxDto);
        return dchyXmglHtxxDtoList;
    }

    public String obtainSlbh() {
        String slbh = "";
        String slbhLsh = dchyXmglChxmMapper.queryMaxSlbh();
        if (slbhLsh.length() > 3) {
            slbh = slbhLsh.substring(slbhLsh.length() - 3, slbhLsh.length());
        } else {
            slbh = slbhLsh;
        }
        return slbh;
    }

    private List<DchyXmglYhxx> generateYhxx(String xmmc, String wtdw, String chxmid, String sftg, List<Map<String, Object>> chdwxxList) {
        String xxnr = null;
        String xxlx = null;
        String sftz = null;
        String yhxxpzid = null;
        DchyXmglChxm dchyXmglChxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
        if (dchyXmglChxm != null) {
            String wtzt = dchyXmglChxm.getWtzt();
            if (StringUtils.isNotEmpty(wtzt)) {
                if (StringUtils.equals(sftg, "1")) {
                    yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_XSWTSHTG;
                } else if (StringUtils.equals(sftg, "0")) {
                    yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_XSWTSHBTG;
                }
            } else {
                if (StringUtils.equals(sftg, "1")) {
                    yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_HTBAYTG;
                } else if (StringUtils.equals(sftg, "0")) {
                    yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_HTBAYBTG;
                }
            }
        }

        List<DchyXmglYhxx> dchyXmglYhxxList = Lists.newArrayList();
        Example example = new Example(DchyXmglYhxxPz.class);
        example.createCriteria().andEqualTo("id", yhxxpzid);
        List<DchyXmglYhxxPz> xxnrzd = entityMapper.selectByExampleNotNull(example);

        if (CollectionUtils.isNotEmpty(xxnrzd)) {
            for (DchyXmglYhxxPz xxnrzds : xxnrzd) {
                if (StringUtils.isNotEmpty(xmmc)) {
                    xxnr = xxnrzds.getXxnr().replaceAll("项目名称", xmmc);
                } else {
                    xxnr = xxnrzds.getXxnr();
                }
                xxlx = xxnrzds.getXxlx();
                sftz = xxnrzds.getSftz();
            }
        }
        //测绘单位提醒消息
        if (chdwxxList != null) {
            for (Map<String, Object> chdwxxLists : chdwxxList) {
                DchyXmglYhxx dchyXmglYhxx = new DchyXmglYhxx();
                dchyXmglYhxx.setFsyhid(UserUtil.getCurrentUserId());
                dchyXmglYhxx.setFssj(CalendarUtil.getCurHMSDate());
                dchyXmglYhxx.setDqzt(Constants.INVALID);//未读
                dchyXmglYhxx.setYhxxid(UUIDGenerator.generate18());
                String jsyhid = MapUtils.getString(chdwxxLists, "chdwid");
                dchyXmglYhxx.setJsyhid(jsyhid);
                dchyXmglYhxx.setGlsxid(chxmid);
                dchyXmglYhxx.setXxnr(xxnr); //消息内容
                dchyXmglYhxx.setXxlx(xxlx); //消息类型
                dchyXmglYhxx.setSftz(sftz); //是否跳转
                dchyXmglYhxxList.add(dchyXmglYhxx);
            }
        }
        //建设单位提醒消息
        if (StringUtils.isNotBlank(wtdw)) {
            DchyXmglYhxx dchyXmglYhxx = new DchyXmglYhxx();
            dchyXmglYhxx.setFsyhid(UserUtil.getCurrentUserId());
            dchyXmglYhxx.setFssj(CalendarUtil.getCurHMSDate());
            dchyXmglYhxx.setDqzt(Constants.INVALID);//未读
            dchyXmglYhxx.setYhxxid(UUIDGenerator.generate18());
            dchyXmglYhxx.setJsyhid(wtdw);
            dchyXmglYhxx.setGlsxid(chxmid);
            dchyXmglYhxx.setXxnr(xxnr); //消息内容
            dchyXmglYhxx.setXxlx(xxlx); //消息类型
            dchyXmglYhxx.setSftz(sftz); //是否跳转
            dchyXmglYhxxList.add(dchyXmglYhxx);
        }
        return dchyXmglYhxxList;
    }

    @Override
    public Page<Map<String, Object>> getCommissionTask(Map<String, Object> param) {
        Page<Map<String, Object>> resultList = null;
        try {
            Map<String, Object> data = (Map<String, Object>) param.get("data");
            String gcbh = CommonUtil.formatEmptyValue(data.get("gcbh"));
            String gcmc = CommonUtil.formatEmptyValue(data.get("gcmc"));
            String babh = CommonUtil.formatEmptyValue(data.get("babh"));
            String jsdwmc = CommonUtil.formatEmptyValue(data.get("jsdwmc"));
            String chdwmc = CommonUtil.formatEmptyValue(data.get("chdwmc"));
            Map<String, Object> paramMap = Maps.newHashMap();
            paramMap.put("gcbh", gcbh);
            paramMap.put("gcmc", gcmc);
            paramMap.put("xqfbbh", babh);
            paramMap.put("wtdw", jsdwmc);
            paramMap.put("chdwmc", chdwmc);
            int page = Integer.parseInt(CommonUtil.formatEmptyValue(data.get("page")));
            int pageSize = Integer.parseInt(CommonUtil.formatEmptyValue(data.get("pageSize")));

            resultList = repository.selectPaging("queryCommissionTaskByPage", paramMap, page - 1, pageSize);

            if (resultList.getContent().size() > 0) {
                for (Map<String, Object> mapTemp : resultList.getContent()) {
                    if (StringUtils.isNotEmpty(CommonUtil.ternaryOperator(mapTemp.get("WTZT")))) {
                        String wtztdm = CommonUtil.ternaryOperator(mapTemp.get("WTZT"));
                        DchyXmglZd zdWtzt = dchyXmglZdService.getDchyXmglByZdlxAndDm("WTZT", wtztdm);
                        if (zdWtzt != null) {
                            mapTemp.put("XMZT", zdWtzt.getMc());
                        }
                    }
                }
            }

        } catch (Exception e) {
            logger.error("错误信息:{}", e);
        }
        return resultList;
    }


}
