package cn.gtmap.msurveyplat.promanage.web.main;

import cn.gtmap.msurveyplat.common.dto.ResponseMessage;
import cn.gtmap.msurveyplat.common.util.CommonUtil;
import cn.gtmap.msurveyplat.common.util.ResponseUtil;
import cn.gtmap.msurveyplat.promanage.service.ContractRegistrationFileService;
import cn.gtmap.msurveyplat.promanage.utils.ResultsSubmitServiceUtil;
import com.google.common.collect.Maps;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.method.P;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Map;

/**
 * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
 * @version 1.0, 2021/1/8
 * @description 成果提交
 */
@RestController
@RequestMapping("/submit")
public class ResultsSubmitController {
    protected final Log logger = LogFactory.getLog(ResultsSubmitController.class);


    @Autowired
    private ContractRegistrationFileService contractService;

    /**
     * @param
     * @return
     * @description 2021/1/25 初始化生成一条sqxxid
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @PostMapping(value = "/initSqxx")
    public ResponseMessage initSqxx() {
        ResponseMessage message = new ResponseMessage();
        Map map = Maps.newHashMap();
        String sqxxid = ResultsSubmitServiceUtil.getResultsSubmitServiceByCode().initSqxx();
        if (StringUtils.isNotBlank(sqxxid)) {
            map.put("sqxxid", sqxxid);
            message.getHead().setCode(ResponseMessage.CODE.SUCCESS.getCode());
            message.getHead().setMsg(ResponseMessage.CODE.SUCCESS.getMsg());
            message.setData(map);
        } else {
            message.getHead().setMsg(ResponseMessage.CODE.INIT_FAIL.getMsg());
            message.getHead().setCode(ResponseMessage.CODE.INIT_FAIL.getCode());
        }
        return message;
    }

    /**
     * @param param
     * @return
     * @description 2021/1/28  展示成果信息
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @PostMapping(value = "/initCgtj")
    public ResponseMessage initCgtj(@RequestBody Map<String, Object> param) {
        ResponseMessage message = new ResponseMessage();
        if (null != param && param.containsKey("data")) {
            Map data = MapUtils.getMap(param, "data");
            String xmid = CommonUtil.formatEmptyValue(MapUtils.getString(data, "xmid"));
            message = ResultsSubmitServiceUtil.getResultsSubmitServiceByCode().initCgtj(xmid);
        } else {
            message.getHead().setMsg(ResponseMessage.CODE.PARAMETER_FAIL.getMsg());
            message.getHead().setCode(ResponseMessage.CODE.PARAMETER_FAIL.getCode());
        }
        return message;
    }

    /**
     * @param zipFile
     * @param request
     * @return
     * @description 2021/1/11 成果提交 检查文件
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @PostMapping("/checkZipFiles")
    public ResponseMessage checkZipFiles(@RequestParam("files") MultipartFile zipFile, HttpServletRequest request) throws Exception {
        ResponseMessage message;
        Map mapResult = Maps.newHashMap();
        Map mapParam = Maps.newHashMap();
        String sqxxid = CommonUtil.ternaryOperator(request.getParameter("sqxxid"));
        if (StringUtils.isNotBlank(sqxxid)) {
            mapParam.put("sqxxid", sqxxid);
            // 获取文件名
            String fileName = CommonUtil.formatFileName(zipFile.getOriginalFilename());
            message = ResultsSubmitServiceUtil.getResultsSubmitServiceByCode().checkZipFiles(mapParam, fileName, zipFile.getInputStream());
        } else {
            mapResult.put("code", ResponseMessage.CODE.PARAMETER_FAIL.getCode());
            mapResult.put("msg", ResponseMessage.CODE.PARAMETER_FAIL.getMsg());
            message = ResponseUtil.wrapResponseBodyByCodeMap(mapResult);
        }
        return message;
    }

    /**
     * @param
     * @return
     * @description 2021/1/11 成果提交
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @PostMapping("/zipUpload")
    public ResponseMessage zipUpload(@RequestBody Map<String, Object> param) {
        ResponseMessage message = new ResponseMessage();
        Map mapResult = Maps.newHashMap();
        if (null != param && param.containsKey("data")) {
            Map data = MapUtils.getMap(param, "data");
            String glsxid = CommonUtil.formatEmptyValue(MapUtils.getString(data, "sqxxid"));
            String gzlslid = CommonUtil.formatEmptyValue(MapUtils.getString(data, "gzlslid"));
            List<Map<String, String>> errorInfoModels = (List<Map<String, String>>) data.get("errorInfoModels");
            message = ResultsSubmitServiceUtil.getResultsSubmitServiceByCode().zipUpload(gzlslid, glsxid, errorInfoModels);
        } else {
            mapResult.put("code", ResponseMessage.CODE.PARAMETER_FAIL.getCode());
            mapResult.put("msg", ResponseMessage.CODE.PARAMETER_FAIL.getMsg());
            message = ResponseUtil.wrapResponseBodyByCodeMap(mapResult);
        }
        return message;
    }

    /**
     * @param param
     * @return
     * @description 2021/1/25 取消删除改申请信息记录
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @PostMapping(value = "/delSqxx")
    public ResponseMessage delSqxx(@RequestBody Map<String, Object> param) {
        Map mapResult = Maps.newHashMap();
        if (null != param && param.containsKey("data")) {
            Map data = MapUtils.getMap(param, "data");
            String sqxxid = CommonUtil.formatEmptyValue(MapUtils.getString(data, "sqxxid"));
            mapResult = ResultsSubmitServiceUtil.getResultsSubmitServiceByCode().delSqxx(sqxxid);
        } else {
            mapResult.put("code", ResponseMessage.CODE.PARAMETER_FAIL.getCode());
            mapResult.put("msg", ResponseMessage.CODE.PARAMETER_FAIL.getMsg());
        }
        return ResponseUtil.wrapResponseBodyByCodeMap(mapResult);
    }

    /**
     * @return
     * @description 2021/1/22 审核页面信息
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @PostMapping("queryXmxxByTaskid")
    public ResponseMessage queryXmxxByTaskid(@RequestBody Map<String, Object> param) {
        Map paramMap = MapUtils.getMap(param, "data");
        return ResultsSubmitServiceUtil.getResultsSubmitServiceByCode().queryXmxxByTaskid(paramMap);
    }

    /**
     * @param param
     * @return
     * @description 2021/1/25 审核页面附件查看
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @PostMapping(value = "viewfiles")
    public ResponseMessage viewAttachments(@RequestBody Map<String, Object> param) {
        ResponseMessage message = new ResponseMessage();
        Map data = MapUtils.getMap(param, "data");
        Map<String, Object> mapList = contractService.viewattachments2(data);
        if (!mapList.isEmpty()) {
            message.getHead().setMsg(ResponseMessage.CODE.SUCCESS.getMsg());
            message.getHead().setCode(ResponseMessage.CODE.SUCCESS.getCode());
            message.getData().put("dataList", mapList);
        } else {
            message.getHead().setMsg(ResponseMessage.CODE.QUERY_NULL.getMsg());
            message.getHead().setCode(ResponseMessage.CODE.QUERY_NULL.getCode());
        }
        return message;
    }

    /**
     * @param param
     * @return
     * @description 2021/1/29 附件查看通过节点查看
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
//    @PostMapping(value = "viewchildfilesbyid")
//    public ResponseMessage viewAttachmentsById(@RequestBody Map<String, Object> param) {
//        ResponseMessage message = new ResponseMessage();
//        Map data = MapUtils.getMap(param, "data");
//        Map<String, Object> mapList = contractService.viewattachmentsByClsx(data);
//        if (!mapList.isEmpty()) {
//            message.getHead().setMsg(ResponseMessage.CODE.SUCCESS.getMsg());
//            message.getHead().setCode(ResponseMessage.CODE.SUCCESS.getCode());
//            message.getData().put("dataList", mapList);
//        } else {
//            message.getHead().setMsg(ResponseMessage.CODE.QUERY_FAIL.getMsg());
//            message.getHead().setCode(ResponseMessage.CODE.QUERY_FAIL.getCode());
//        }
//        return message;
//    }

    /**
     * @param param
     * @return
     * @description 2021/2/1 通过taskid获取审核记录
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @PostMapping(value = "getShjlByTaskid")
    public ResponseMessage getShjlByTaskid(@RequestBody Map<String, Object> param) {
        Map paramMap = MapUtils.getMap(param, "data");
        return ResultsSubmitServiceUtil.getResultsSubmitServiceByCode().getShjlByTaskid(paramMap);
    }

    /**
     * @param param
     * @return
     * @description 2021/1/25 审核完成
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @PostMapping(value = "checkFinish")
    public ResponseMessage checkFinish(@RequestBody Map<String, Object> param) {
        Map paramMap = MapUtils.getMap(param, "data");
        return ResultsSubmitServiceUtil.getResultsSubmitServiceByCode().checkFinish(paramMap);
    }


}
