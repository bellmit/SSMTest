package cn.gtmap.msurveyplat.serviceol.service.impl;

import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.EntityMapper;
import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.Example;
import cn.gtmap.msurveyplat.common.core.support.mybatis.page.repository.Repository;

import cn.gtmap.msurveyplat.common.domain.dchyxmgl.*;
import cn.gtmap.msurveyplat.common.dto.ResponseMessage;
import cn.gtmap.msurveyplat.common.util.*;
import cn.gtmap.msurveyplat.serviceol.core.service.DchyXmglZdService;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.model.JcsjsqModel;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.service.Impl.JcsjsqServiceImpl;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.service.PushDataToMqService;
import cn.gtmap.msurveyplat.serviceol.core.xsbfmapper.*;
import cn.gtmap.msurveyplat.serviceol.model.PfUser;
import cn.gtmap.msurveyplat.serviceol.service.DchyXmglJcsjsqService;
import cn.gtmap.msurveyplat.serviceol.utils.Constants;
import cn.gtmap.msurveyplat.serviceol.utils.UserUtil;
import cn.gtmap.msurveyplat.serviceol.web.util.FileDownoadUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.gtis.common.util.UUIDGenerator;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipOutputStream;

import static java.lang.Integer.parseInt;

/**
 * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
 * @version 1.0, 2021/3/8
 * @description TODO 基础数据申请
 */
@Service
public class DchyXmglJcsjsqServiceImpl implements DchyXmglJcsjsqService {

    protected final Log logger = LogFactory.getLog(DchyXmglJcsjsqServiceImpl.class);

    @Autowired
    @Resource(name = "entityMapperXSBF")
    private EntityMapper entityMapperXSBF;

    @Autowired
    private EntityMapper entityMapper;

    @Autowired
    @Resource(name = "repositoryXSBF")
    private Repository repository;

    @Autowired
    private JcsjsqMapper jcsjsqMapper;

    @Autowired
    private JcsjsqServiceImpl jcsjsqService;
    @Autowired
    private PushDataToMqService pushDataToMqService;

    @Autowired
    private XsbfDchyXmglChgcMapper xsbfDchyXmglChgcMapper;

    @Autowired
    private DchyXmglZdService dchyXmglZdService;

    @Autowired
    private DchyXmglMlkXSBFMapper dchyXmglMlkMapper;

    @Autowired
    private ExchangeFeignServiceImpl dispatchOrderFsmServiceImpl;

    @Override
    public ResponseMessage queryBasicDataApplicationInfo(Map map) {
        List<String> mlkidList = Lists.newArrayList();
        Example example = new Example(DchyXmglYhdw.class);
        example.createCriteria().andEqualTo("yhid", UserUtil.getCurrentUserId());
        List<DchyXmglYhdw> dchyXmglYhdwList = entityMapper.selectByExample(example);
        if (CollectionUtils.isNotEmpty(dchyXmglYhdwList)) {
            DchyXmglYhdw dchyXmglYhdw = dchyXmglYhdwList.get(0);
            String dwbh = dchyXmglYhdw.getDwbh();
            Example exampleMlk = new Example(DchyXmglMlk.class);
            exampleMlk.createCriteria().andEqualTo("dwbh", dwbh);
            List<DchyXmglMlk> dchyXmglMlkList = entityMapper.selectByExample(exampleMlk);
            for (DchyXmglMlk dchyXmglMlk : dchyXmglMlkList) {
                mlkidList.add(dchyXmglMlk.getMlkid());
                map.put("mlkidList", mlkidList);
            }
        }


        int page = Integer.parseInt(map.get("page") != null ? map.get("page").toString() : Constants.DCHY_XMGL_PAGINATION_PAGE);
        int pageSize = Integer.parseInt(map.get("size") != null ? map.get("size").toString() : Constants.DCHY_XMGL_PAGINATION_SIZE);
        logger.info("******************page:" + page);
        logger.info("******************pageSize:" + pageSize);
        Page<Map<String, Object>> registerFileByPage = repository.selectPaging("queryBasicDataApplicationInfoByPage", map, page - 1, pageSize);
        return ResponseUtil.wrapResponseBodyByPage(registerFileByPage);
    }

    @Override
    @Transactional
    public ResponseMessage initBasicDataApplication(Map map) {
        ResponseMessage message = new ResponseMessage();
        String babh = CommonUtil.formatEmptyValue(MapUtils.getString(map, "babh"));
        String[] babhList = babh.split(";");
        if (null != babhList && babhList.length > 0) {
            List<String> babhs = Lists.newArrayList();
            for (String string : babhList) {
                babhs.add(string);
                int flagSqxx = generateSqxxBybabh(string);
                if (flagSqxx < 0) {
                    message.getHead().setCode(ResponseMessage.CODE.SYSTEM_WRONG.getCode());
                    message.getHead().setCode(ResponseMessage.CODE.SYSTEM_WRONG.getMsg());
                    break;
                }
                message.getHead().setCode(ResponseMessage.CODE.SUCCESS.getCode());
                message.getHead().setMsg(ResponseMessage.CODE.SUCCESS.getMsg());
            }

        } else {
            message.getHead().setCode(ResponseMessage.CODE.PARAMETER_FAIL.getCode());
            message.getHead().setCode(ResponseMessage.CODE.PARAMETER_FAIL.getMsg());
        }

        return message;
    }

    @Override
    public ResponseMessage applicationInfoView(Map map) {
        ResponseMessage message = new ResponseMessage();
        Map paramMap = Maps.newHashMap();
        Map resultMap = Maps.newHashMap();
        String chxmid = CommonUtil.formatEmptyValue(MapUtils.getString(map, "chxmid"));
        if (StringUtils.isNotBlank(chxmid)) {
            paramMap.put("chxmid", chxmid);
            List<Map> baxxList = jcsjsqMapper.querBaxxByChxmid(paramMap);
            for (Map baxx : baxxList) {
                String gcdz = "";
                if (StringUtils.isNotBlank(MapUtils.getString(baxx, "XMZT"))) {
                    String xmzt = MapUtils.getString(baxx, "XMZT");
                    DchyXmglZd gcdzssZd = dchyXmglZdService.getDchyXmglByZdlxAndDm(Constants.DCHY_XMGL_ZDLX_XMZT, xmzt);
                    baxx.put("XMZT", gcdzssZd.getMc());
                }

                if (StringUtils.isNotBlank(MapUtils.getString(baxx, "GCDZS"))) {
                    String gcdzs = MapUtils.getString(baxx, "GCDZS");
                    DchyXmglZd gcdzsZd = dchyXmglZdService.getDchyXmglByZdlxAndDm(Constants.DCHY_XMGL_CHXM_GCDZ, gcdzs);
                    gcdz += gcdzsZd.getMc();
                }

                if (StringUtils.isNotBlank(MapUtils.getString(baxx, "GCDZSS"))) {
                    String gcdzss = MapUtils.getString(baxx, "GCDZSS");
                    DchyXmglZd gcdzssZd = dchyXmglZdService.getDchyXmglByZdlxAndDm(Constants.DCHY_XMGL_CHXM_GCDZ, gcdzss);
                    gcdz += gcdzssZd.getMc();
                }

                if (StringUtils.isNotBlank(MapUtils.getString(baxx, "GCDZQX"))) {
                    String gcdzqx = MapUtils.getString(baxx, "GCDZQX");
                    DchyXmglZd gcdzqxZd = dchyXmglZdService.getDchyXmglByZdlxAndDm(Constants.DCHY_XMGL_CHXM_GCDZ, gcdzqx);
                    gcdz += gcdzqxZd.getMc();
                }
                baxx.put("GCDZ", gcdz);
            }
            resultMap.put("baxxList", baxxList);
            DchyXmglChxm dchyXmglChxm = entityMapperXSBF.selectByPrimaryKey(DchyXmglChxm.class, chxmid);

            paramMap.put("gcbh", dchyXmglChxm.getChgcbh());
            List<Map> baClsxList = jcsjsqMapper.queryBaClsxListByGcbh(paramMap);
            resultMap.put("baClsxList", baClsxList);

            String glsxid = dchyXmglChxm.getSlbh();

            Example exampleSjxx = new Example(DchyXmglSjxx.class);
            exampleSjxx.createCriteria().andEqualTo("glsxid", glsxid);
            List<DchyXmglSjxx> dchyXmglSjxxList = entityMapperXSBF.selectByExample(exampleSjxx);
            DchyXmglSjcl dchyXmglSjcl = null;
            if (CollectionUtils.isNotEmpty(dchyXmglSjxxList) && dchyXmglSjxxList.size() > 0) {
                DchyXmglSjxx dchyXmglSjxx = dchyXmglSjxxList.get(0);
                Example exampleSjcl = new Example(DchyXmglSjcl.class);
                exampleSjcl.createCriteria().andEqualTo("sjxxid", dchyXmglSjxx.getSjxxid());
                List<DchyXmglSjcl> dchyXmglSjclList = entityMapperXSBF.selectByExample(exampleSjcl);
                if (CollectionUtils.isNotEmpty(dchyXmglSjclList) && dchyXmglSjclList.size() > 0) {
                    dchyXmglSjcl = dchyXmglSjclList.get(0);
                }
            }
            resultMap.put("jcsjfw", dchyXmglSjcl);

            message.getHead().setCode(ResponseMessage.CODE.SUCCESS.getCode());
            message.getHead().setMsg(ResponseMessage.CODE.SUCCESS.getMsg());
            message.setData(resultMap);
        } else {
            message.getHead().setCode(ResponseMessage.CODE.QUERY_NULL.getCode());
            message.getHead().setMsg(ResponseMessage.CODE.QUERY_NULL.getMsg());
        }
        return message;
    }

    @Override
    public ResponseMessage myProjectInfoView(Map map) {
        ResponseMessage message = new ResponseMessage();
        List<Map> clsxList = Lists.newArrayList();
        Map jsdwxx = Maps.newHashMap();
        Map chdwxx = Maps.newHashMap();
        Map wtxmxx = Maps.newHashMap();
        Map paramMap = Maps.newHashMap();
        Map resultMap = Maps.newHashMap();
        String chxmid = CommonUtil.formatEmptyValue(MapUtils.getString(map, "chxmid"));
        String chdwxxid = CommonUtil.formatEmptyValue(MapUtils.getString(map, "chdwxxid"));
        if (StringUtils.isNoneBlank(chxmid, chdwxxid)) {
            paramMap.put("chxmid", chxmid);
            paramMap.put("chdwxxid", chdwxxid);

            //委托项目信息
            List<Map<String, Object>> wtxmxxList = xsbfDchyXmglChgcMapper.queryWtxxByChdwxxids(paramMap);
            //拼接地址
            if (CollectionUtils.isNotEmpty(wtxmxxList) && wtxmxxList.size() > 0) {
                wtxmxx = wtxmxxList.get(0);
                String gcdzs = CommonUtil.formatEmptyValue(MapUtils.getString(wtxmxx, "GCDZS"));
                DchyXmglZd gcdzsZd = dchyXmglZdService.getDchyXmglByZdlxAndDm("GCDZ", gcdzs);
                String gcdzss = CommonUtil.formatEmptyValue(MapUtils.getString(wtxmxx, "GCDZSS"));
                DchyXmglZd gcdzssZd = dchyXmglZdService.getDchyXmglByZdlxAndDm("GCDZ", gcdzss);
                String gcdzqx = CommonUtil.formatEmptyValue(MapUtils.getString(wtxmxx, "GCDZQX"));
                DchyXmglZd gcdzqxZd = dchyXmglZdService.getDchyXmglByZdlxAndDm("GCDZ", gcdzqx);

                String gcdz = gcdzsZd.getMc() + gcdzssZd.getMc() + gcdzqxZd.getMc();
                wtxmxx.put("GCDZ", gcdz);
            }

            //建设单位信息 测绘单位信息
            if (null != wtxmxx) {
                String jsdwmc = CommonUtil.formatEmptyValue(MapUtils.getString(wtxmxx, "WTDW"));
                String chdwmc = CommonUtil.formatEmptyValue(MapUtils.getString(wtxmxx, "CHDWMC"));
                String jsdwLxr = CommonUtil.formatEmptyValue(MapUtils.getString(wtxmxx, "LXR"));
                String jsdwLxdh = CommonUtil.formatEmptyValue(MapUtils.getString(wtxmxx, "LXDH"));
                Example exampleJsdw = new Example(DchyXmglYhdw.class);
                Example exampleChdw = new Example(DchyXmglYhdw.class);
                exampleJsdw.createCriteria().andEqualTo("dwmc", jsdwmc);
                exampleChdw.createCriteria().andEqualTo("dwmc", chdwmc);
                List<DchyXmglYhdw> jsdwList = entityMapper.selectByExample(exampleJsdw);
                List<DchyXmglYhdw> chdwList = entityMapper.selectByExample(exampleChdw);
                if (CollectionUtils.isNotEmpty(jsdwList) && jsdwList.size() > 0) {
                    DchyXmglYhdw dchyXmglYhdw = jsdwList.get(0);
                    //解密联系人联系电话
                    DataSecurityUtil.decryptSingleObject(dchyXmglYhdw);
                    jsdwxx.put("DWMC", dchyXmglYhdw.getDwmc());
                    jsdwxx.put("LXR", SM4Util.decryptData_ECB(jsdwLxr));
                    jsdwxx.put("TYSHXYDM", dchyXmglYhdw.getTyshxydm());
                    jsdwxx.put("LXDH", SM4Util.decryptData_ECB(jsdwLxdh));
                }

                if (CollectionUtils.isNotEmpty(chdwList) && chdwList.size() > 0) {
                    DchyXmglYhdw dchyXmglYhdw = chdwList.get(0);
                    //解密联系人联系电话
                    DataSecurityUtil.decryptSingleObject(dchyXmglYhdw);
                    String yhid = dchyXmglYhdw.getYhid();
                    PfUser pfUser = entityMapper.selectByPrimaryKey(PfUser.class, yhid);
                    chdwxx.put("DWMC", dchyXmglYhdw.getDwmc());
                    chdwxx.put("LXR", pfUser.getUserName());
                    chdwxx.put("TYSHXYDM", dchyXmglYhdw.getTyshxydm());
                    chdwxx.put("LXDH", pfUser.getMobilePhone());
                }
            }
            clsxList = jcsjsqMapper.queryClsxByChxmid(paramMap);

            resultMap.put("jsdwxx", jsdwxx);
            resultMap.put("chdwxx", chdwxx);
            resultMap.put("wtxmxx", wtxmxx);
            resultMap.put("clsxList", clsxList);


            message.getHead().setCode(ResponseMessage.CODE.SUCCESS.getCode());
            message.getHead().setMsg(ResponseMessage.CODE.SUCCESS.getMsg());
            message.setData(resultMap);
        } else {
            message.getHead().setCode(ResponseMessage.CODE.QUERY_NULL.getCode());
            message.getHead().setMsg(ResponseMessage.CODE.QUERY_NULL.getMsg());
        }
        return message;
    }

    @Override
    public ResponseEntity<byte[]> DownLoadFileByWjzxid(String wjzxid, HttpServletRequest httpServletRequest, HttpServletResponse response) {
        // 构建响应
        ResponseEntity.BodyBuilder bodyBuilder = ResponseEntity.ok();

        // 二进制数据流
        bodyBuilder.contentType(MediaType.APPLICATION_OCTET_STREAM);

        int nodeId = Integer.parseInt(wjzxid);
        String fileName = "数据范围.zip";
        response.reset();//清空缓存区，防止存在某些字符使得下载的文件格式错误
        response.setContentType("application/octet-stream");

        ZipOutputStream zos = null;
        HttpStatus httpState = null;
        byte[] body = null;
        ByteArrayOutputStream byteArrayOutputStream = null;
        try {

            int num = FileDownoadUtil.getFileNumberByNodeId(nodeId);
            Map<String, Object> wjxzMap = Maps.newHashMap();
            if (num == 0) {
                httpState = HttpStatus.NOT_FOUND;
            } else {

                if (num == 1) {
                    wjxzMap.putAll(FileDownoadUtil.downLoadFile(nodeId));
                    if (MapUtils.isNotEmpty(wjxzMap)) {
                        fileName = MapUtils.getString(wjxzMap, "wjmc");
                        body = (byte[]) wjxzMap.get("wjnr");
                    }
                } else {
                    byteArrayOutputStream = new ByteArrayOutputStream();
                    zos = new ZipOutputStream(byteArrayOutputStream);
                    fileName = FileDownoadUtil.downLoadZip(zos, nodeId, null);
                    zos.finish();
                    body = byteArrayOutputStream.toByteArray();
                    fileName += ".zip";
                }

                fileName = FileDownoadUtil.encodeFileName(httpServletRequest, fileName);
                response.setHeader("Content-Disposition", "attachment;" + fileName);
                HttpHeaders headers = new HttpHeaders();
                headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
                headers.add("Content-Disposition", "attachment; filename=" + fileName);
                headers.add("Pragma", "no-cache");
                headers.add("Expires", "0");
                headers.add("Last-Modified", new Date().toString());
                headers.add("ETag", String.valueOf(System.currentTimeMillis()));
                return ResponseEntity
                        .ok()
                        .headers(headers)
                        .contentLength(body.length)
                        .contentType(MediaType.parseMediaType("application/octet-stream"))
                        .body(body);
            }
        } catch (Exception e) {
            httpState = HttpStatus.EXPECTATION_FAILED;
            e.printStackTrace();
        } finally {
            // 关闭流
            try {
                if (null != zos) {
                    zos.flush();
                    zos.close();
                }
                if (null != byteArrayOutputStream) {
                    byteArrayOutputStream.flush();
                    byteArrayOutputStream.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
    }

    @Override
    public ResponseMessage querySqxxList(Map map) {
        ResponseMessage message = new ResponseMessage();
        int page = Integer.parseInt(map.get("page") != null ? map.get("page").toString() : Constants.DCHY_XMGL_PAGINATION_PAGE);
        int pageSize = Integer.parseInt(map.get("size") != null ? map.get("size").toString() : Constants.DCHY_XMGL_PAGINATION_SIZE);
        logger.info("******************page:" + page);
        logger.info("******************pageSize:" + pageSize);
        Page<Map<String, Object>> querySqxxListByPage = repository.selectPaging("querySqxxListByPage", map, page - 1, pageSize);

        return ResponseUtil.wrapResponseBodyByPage(querySqxxListByPage);
    }

    @Transactional(propagation = Propagation.REQUIRED)
    @Override
    public Integer generateSqxxBybabh(String slbh) {
        Map result = Maps.newHashMap();
        int flag = 0;
        DchyXmglJcsjSqxx dchyXmglJcsjSqxx = new DchyXmglJcsjSqxx();
        if (StringUtils.isNotBlank(slbh)) {
            Map paramMap = Maps.newHashMap();
            paramMap.put("slbh", slbh);
            List<Map> baxxList = jcsjsqMapper.queryBaxxBySlbh(paramMap);
            if (CollectionUtils.isNotEmpty(baxxList) && baxxList.size() > 0) {
                Map resultMap = baxxList.get(0);
                String chxmid = CommonUtil.formatEmptyValue(MapUtils.getString(resultMap, "CHXMID"));

                dchyXmglJcsjSqxx.setJcsjsqxxid(UUIDGenerator.generate18());
                dchyXmglJcsjSqxx.setBabh(CommonUtil.formatEmptyValue(MapUtils.getString(resultMap, "SLBH")));
                dchyXmglJcsjSqxx.setChxmid(chxmid);
                dchyXmglJcsjSqxx.setDqzt(Constants.DCHY_XMGL_JCSJSQ_DQSQZT_SHZ);
                dchyXmglJcsjSqxx.setGcbh(CommonUtil.formatEmptyValue(MapUtils.getString(resultMap, "GCBH")));
                dchyXmglJcsjSqxx.setGcmc(CommonUtil.formatEmptyValue(MapUtils.getString(resultMap, "GCMC")));
                dchyXmglJcsjSqxx.setJsdw(CommonUtil.formatEmptyValue(MapUtils.getString(resultMap, "WTDW")));
                dchyXmglJcsjSqxx.setSqfs(Constants.DCHY_XMGL_SQFS_XS);
                dchyXmglJcsjSqxx.setSqsj(CalendarUtil.getCurHMSDate());

                flag = entityMapperXSBF.saveOrUpdate(dchyXmglJcsjSqxx, dchyXmglJcsjSqxx.getJcsjsqxxid());
                if (flag > 0) {
                    //同步基础数据申请数据到线下
                    List<DchyXmglJcsjSqxx> dchyXmglJcsjSqxxes = Lists.newArrayList();
                    dchyXmglJcsjSqxxes.add(dchyXmglJcsjSqxx);
                    JcsjsqModel jcsjsqModel = jcsjsqService.getSingleData(chxmid);
                    jcsjsqModel.setDchyXmglJcsjSqxxList(dchyXmglJcsjSqxxes);
                    result.put("saveOrUpdate", jcsjsqModel);
                    pushDataToMqService.pushJcsjsqMsgToMq(JSONObject.toJSONString(result));
                }
            }
        }
        return flag;
    }

    @Override
    public List<Map> queryBaClsxListByGcbh(String gcbh) {
        Map paramMap = Maps.newHashMap();
        if (StringUtils.isNotBlank(gcbh)) {
            paramMap.put("gcbh", gcbh);
        }
        return jcsjsqMapper.queryBaClsxListByGcbh(paramMap);
    }

    @Override
    public ResponseMessage resultsSpotCheck(Map map) {
        ResponseMessage message = new ResponseMessage();
        int num = Integer.parseInt(map.get("num") != null ? map.get("num").toString() : Constants.DCHY_XMGL_CGCC_MRTS);
        return null;
    }

    @Override
    public List<Map<String, Object>> getHtxxSjclXx(String glsxid) {
        List<Map<String, Object>> htxxList = jcsjsqMapper.getHtxxSjclXx(glsxid);
        for (Map<String, Object> htxxLists : htxxList) {
            if (org.apache.commons.lang.StringUtils.isNotEmpty(MapUtils.getString(htxxLists, "HTXXID"))) {
                String htxxid = MapUtils.getString(htxxLists, "HTXXID");
                List<Map<String, Object>> clsxList = jcsjsqMapper.getClsxByChxmid(htxxid);
                List<Map<String, Object>> chdwxxList = jcsjsqMapper.getChdwxxByChxmid(htxxid);

                if (CollectionUtils.isNotEmpty(clsxList)) {
                    htxxLists.put("CLSX", clsxList);
                }
                if (CollectionUtils.isNotEmpty(chdwxxList)) {
                    htxxLists.put("CHDWXX", chdwxxList);
                }
            }
        }
        return htxxList;
    }

    @Override
    public List<Map<String, Object>> queryUploadFileBySsmkId(String ssmkid) {
        return dchyXmglMlkMapper.queryUploadFileBySsmkId(ssmkid);
    }

    /**
     * 初始化合同信息与收件信息
     *
     * @param glsxid
     * @param ssmkId
     * @param mapList
     */
    @Override
    @Transactional
    public void initHtxxSjxxAndClxx(String glsxid, String ssmkId, List<Map<String, Object>> mapList) {
        if (CollectionUtils.isNotEmpty(mapList)) {
            /*合同信息*/
            for (Map<String, Object> map : mapList) {
                String htxxid = UUIDGenerator.generate18();
                DchyXmglHtxx htxx = new DchyXmglHtxx();
                htxx.setHtxxid(htxxid);
                htxx.setChxmid(glsxid);
                entityMapperXSBF.saveOrUpdate(htxx, htxx.getHtxxid());

                String sjxxId = UUIDGenerator.generate18();
                Date sjsj = new Date();
                String sjr = UserUtil.getCurrentUserId();
                String tjr = "";
                DchyXmglSjxx sjxx = new DchyXmglSjxx();
                sjxx.setSjxxid(sjxxId);
                sjxx.setGlsxid(htxxid);
                sjxx.setSsmkid(ssmkId);
                sjxx.setSjsj(sjsj);
                sjxx.setTjr(tjr);
                sjxx.setSjr(sjr);
                entityMapperXSBF.saveOrUpdate(sjxx, sjxx.getSjxxid());

                String sjclid = UUIDGenerator.generate18();
                map.put("SJCLID", sjclid);
                map.put("SJXXID", sjxxId);
                map.put("HTXXID", htxxid);
                int fs = map.containsKey("FS") ? (((BigDecimal) map.get("FS")).intValue()) : 1;
                String mlmc = (String) map.get("CLMC");
                DchyXmglSjcl sjcl = new DchyXmglSjcl();
                sjcl.setSjclid(sjclid);
                sjcl.setSjxxid(sjxxId);
                sjcl.setClmc(mlmc);
                sjcl.setCllx(CommonUtil.formatEmptyValue(map.get("CLLX")));
                sjcl.setFs(fs);
                sjcl.setClrq(new Date());
                sjcl.setYs(1);
                entityMapperXSBF.saveOrUpdate(sjcl, sjcl.getSjclid());
            }
        }
    }

    @Override
    public List<Map<String, Object>> getSjclXx(String glsxid) {
        return dchyXmglMlkMapper.getSjclXx(glsxid);
    }

    /**
     * 文件上传后记录保存在收件信息和材料信息中
     *
     * @return
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void initSjxxAndClxx(String glsxId, String ssmkId, List<Map<String, Object>> mapList) {
        if (CollectionUtils.isNotEmpty(mapList)) {
            /*收件信息*/
            String sjxxId = UUIDGenerator.generate18();
            Date sjsj = new Date();
            String sjr = UserUtil.getCurrentUserId();
            String tjr = "";
            DchyXmglSjxx sjxx = new DchyXmglSjxx();
            sjxx.setSjxxid(sjxxId);
            sjxx.setGlsxid(glsxId);
            sjxx.setSsmkid(ssmkId);
            sjxx.setSjsj(sjsj);
            sjxx.setTjr(tjr);
            sjxx.setSjr(sjr);
            entityMapperXSBF.saveOrUpdate(sjxx, sjxx.getSjxxid());

            for (Map<String, Object> map : mapList) {
                String sjclid = UUIDGenerator.generate18();
                map.put("SJCLID", sjclid);
                map.put("SJXXID", sjxxId);
                int fs = map.containsKey("FS") ? (((BigDecimal) map.get("FS")).intValue()) : 1;
                String mlmc = (String) map.get("CLMC");
                DchyXmglSjcl sjcl = new DchyXmglSjcl();
                sjcl.setSjclid(sjclid);
                sjcl.setSjxxid(sjxxId);
                sjcl.setClmc(mlmc);
                sjcl.setCllx(CommonUtil.formatEmptyValue(map.get("CLLX")));
                sjcl.setFs(fs);
                sjcl.setClrq(new Date());
                sjcl.setYs(1);
                entityMapperXSBF.saveOrUpdate(sjcl, sjcl.getSjclid());
            }
        }
    }

    @Override
    public List<Map<String, Object>> getZdClsx(Map<String, Object> dataMap) {
        Map<String, Object> data = (Map<String, Object>) dataMap.get("data");
        String chxmid = CommonUtil.formatEmptyValue(data.get("chxmid"));
        Map<String, Object> paramMap = Maps.newHashMap();
        paramMap.put("chxmid", chxmid);
        List<Map<String, Object>> dchyXmglZdList = jcsjsqMapper.getZdClsx(paramMap);
        for (Map<String, Object> dchyXmglZdLists : dchyXmglZdList) {
            String yjjf = MapUtils.getString(dchyXmglZdLists, "YJJFRQ");
            if (StringUtils.isNotBlank(yjjf)) {
                String jcrq = MapUtils.getString(dchyXmglZdLists, "JCRQ");
                Calendar cl = Calendar.getInstance();
                cl.setTime(CalendarUtil.formatDate(jcrq));
                cl.add(Calendar.DATE, parseInt(yjjf));
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                String temp = df.format(cl.getTime());
                dchyXmglZdLists.put("JSRQ", temp);
            }

        }
        return dchyXmglZdList;
    }

    @Override
    public ResponseMessage evaluationCheckResults(Map map) {
        ResponseMessage message = new ResponseMessage();
        int page = Integer.parseInt(map.get("page") != null ? map.get("page").toString() : Constants.DCHY_XMGL_PAGINATION_PAGE);
        int pageSize = Integer.parseInt(map.get("size") != null ? map.get("size").toString() : Constants.DCHY_XMGL_PAGINATION_SIZE);
        logger.info("******************page:" + page);
        logger.info("******************pageSize:" + pageSize);

        String chdwmc = "";
        String mlkid = this.getMlkByUserId();
        if (StringUtils.isNotBlank(mlkid)) {
            DchyXmglMlk xmglMlk = entityMapper.selectByPrimaryKey(DchyXmglMlk.class, mlkid);
            if (null != xmglMlk) {
                chdwmc = xmglMlk.getDwmc();
            }
        }
        map.put("chdwmc", chdwmc);
        Page<Map<String, Object>> evaluationCheckResultsByPage = repository.selectPaging("evaluationCheckResultsByPage", map, page - 1, pageSize);

        List<Map<String, Object>> rows = evaluationCheckResultsByPage.getContent();
        logger.info("******************rows:" + rows);
        if (CollectionUtils.isNotEmpty(rows)) {
            for (Map<String, Object> dataMap : rows) {
                String glsxid = CommonUtil.formatEmptyValue(MapUtils.getString(dataMap, "CGCCID"));
                List<String> wjzxids = Lists.newArrayList();
                if (StringUtils.isNotBlank(glsxid)) {
                    Example exampleSjxx = new Example(DchyXmglSjxx.class);
                    exampleSjxx.createCriteria().andEqualTo("glsxid", glsxid);
                    List<DchyXmglSjxx> dchyXmglSjxxList = entityMapper.selectByExample(exampleSjxx);
                    if (CollectionUtils.isNotEmpty(dchyXmglSjxxList)) {
                        for (DchyXmglSjxx dchyXmglSjxx : dchyXmglSjxxList) {
                            Example exampleSjcl = new Example(DchyXmglSjcl.class);
                            exampleSjcl.createCriteria().andEqualTo("sjxxid", dchyXmglSjxx.getSjxxid());
                            List<DchyXmglSjcl> dchyXmglSjclList = entityMapper.selectByExample(exampleSjcl);
                            if (CollectionUtils.isNotEmpty(dchyXmglSjclList)) {
                                for (DchyXmglSjcl dchyXmglSjcl : dchyXmglSjclList) {
                                    if (StringUtils.isNotBlank(dchyXmglSjcl.getWjzxid())) {
                                        wjzxids.add(dchyXmglSjcl.getWjzxid());
                                    }
                                }
                            }
                        }
                    }

                }

                if (wjzxids.size() > 0) {
                    dataMap.put("SFSC", "1");
                } else {
                    dataMap.put("SFSC", "0");
                }
            }
        }

        return ResponseUtil.wrapResponseBodyByPage(evaluationCheckResultsByPage);
    }

    @Override
    public ResponseMessage evaluationCheckResultsView(Map map) {
        ResponseMessage message = new ResponseMessage();
        Map resultMap = Maps.newHashMap();
        String cgccid = CommonUtil.formatFileName(MapUtils.getString(map, "cgccid"));
        if (StringUtils.isNotBlank(cgccid)) {
            DchyXmglCgcc dchyXmglCgcc = entityMapperXSBF.selectByPrimaryKey(DchyXmglCgcc.class, cgccid);
            resultMap.put("data", dchyXmglCgcc);
            message.setData(resultMap);
            message.getHead().setCode(ResponseMessage.CODE.SUCCESS.getCode());
            message.getHead().setMsg(ResponseMessage.CODE.SUCCESS.getMsg());
        } else {
            message.getHead().setCode(ResponseMessage.CODE.PARAMETER_FAIL.getCode());
            message.getHead().setMsg(ResponseMessage.CODE.PARAMETER_FAIL.getMsg());
        }
        return message;
    }

    /**
     * 获取mlkid
     *
     * @param
     * @return
     */
    private String getMlkByUserId() {
        String userId = UserUtil.getCurrentUserId();
        if (StringUtils.isNotBlank(userId)) {
            Example yhdwExample = new Example(DchyXmglYhdw.class);
            yhdwExample.createCriteria().andEqualTo("yhid", userId);
            List<DchyXmglYhdw> yhdwList = entityMapper.selectByExample(yhdwExample);
            if (CollectionUtils.isNotEmpty(yhdwList)) {
                DchyXmglYhdw yhdw = yhdwList.get(0);
                if (null != yhdw) {
                    String dwbh = yhdw.getDwbh();
                    if (StringUtils.isNotBlank(dwbh)) {
                        /*通过单位编号获取对应mlkid*/
                        Example mlkExample = new Example(DchyXmglMlk.class);
                        mlkExample.createCriteria().andEqualTo("dwbh", dwbh);
                        List<DchyXmglMlk> mlkList = entityMapper.selectByExample(mlkExample);
                        if (CollectionUtils.isNotEmpty(mlkList)) {
                            DchyXmglMlk mlk = mlkList.get(0);
                            if (null != mlk) {
                                return mlk.getMlkid();
                            }
                        }
                    }
                }
            }
        }
        return "";
    }

    @Override
    public ResponseMessage getsjcl(Map map) {
        ResponseMessage message = new ResponseMessage();
        Map resultMap = Maps.newHashMap();
        List<Map> sjclList = jcsjsqMapper.getSjcl(map);
        resultMap.put("dataList", sjclList);
        message.setData(resultMap);
        message.getHead().setCode(ResponseMessage.CODE.SUCCESS.getCode());
        message.getHead().setMsg(ResponseMessage.CODE.SUCCESS.getMsg());
        return message;
    }

    @Override
    public ResponseMessage resultsDeliveryLogList(Map map) {
        ResponseMessage message = new ResponseMessage();
        Map paramMap = Maps.newHashMap();
        Map resultMap = Maps.newHashMap();
        List<Map> dchyXmglJcsjsqJfrzList = Lists.newArrayList();
        String jcsjsqxxid = CommonUtil.formatEmptyValue(MapUtils.getString(map, "jcsjsqxxid"));
        String glsxid = queryXmidByJcsjsqxxid(jcsjsqxxid);

        if (StringUtils.isNotBlank(glsxid)) {
            Example example = new Example(DchyXmglCzrz.class);
            example.createCriteria().andEqualTo("glsxid", glsxid);
            List<DchyXmglCzrz> dchyXmglCzrzList = entityMapper.selectByExample(example);
            if (CollectionUtils.isNotEmpty(dchyXmglCzrzList)) {
                for (DchyXmglCzrz dchyXmglCzrz : dchyXmglCzrzList) {
                    String czcs = dchyXmglCzrz.getCzcs();
                    Map<String, Object> mapJson = (Map) JSON.parse(czcs);
                    dchyXmglJcsjsqJfrzList.add(mapJson);
                }
            }
        }
        resultMap.put("data", dchyXmglJcsjsqJfrzList);
        message = ResponseUtil.wrapSuccessResponse();
        message.setData(resultMap);
        return message;
    }

    @Override
    public ResponseMessage getProcessInfoBySlbh(Map map) {
        ResponseMessage message = new ResponseMessage();
//        String slbh = CommonUtil.formatEmptyValue(MapUtils.getString(map, "slbh"));
        String jcsjsqxxid = CommonUtil.formatEmptyValue(MapUtils.getString(map, "jcsjsqxxid"));
        String xmid = queryXmidByJcsjsqxxid(jcsjsqxxid);
        String slbh = "";
        if (StringUtils.isNotBlank(xmid)) {
            slbh = entityMapperXSBF.selectByPrimaryKey(DchyXmglSqxx.class, xmid).getXssqbh();
        }
        if (StringUtils.isNotBlank(slbh)) {
            List<Map> processInfoList = dispatchOrderFsmServiceImpl.getProcessInfoBySlbh(slbh);
            if (CollectionUtils.isNotEmpty(processInfoList)) {
                for (Map processInfo : processInfoList) {
                    String hj = CommonUtil.formatFileName(MapUtils.getString(processInfo, "HJ"));
                    if (StringUtils.equals(Constants.DCHY_XMGL_JCSJSQ_HJ_SH, hj)) {
                        DchyXmglSqxx dchyXmglSqxx = entityMapper.selectByPrimaryKey(DchyXmglSqxx.class, xmid);
                        Example exampleShjl = new Example(DchyXmglJcsjShjl.class);
                        exampleShjl.createCriteria().andEqualTo("jcsjsqxxid", dchyXmglSqxx.getGlsxid());
                        List<DchyXmglJcsjShjl> dchyXmglJcsjShjlList = entityMapper.selectByExample(exampleShjl);
                        if (CollectionUtils.isNotEmpty(dchyXmglJcsjShjlList) && dchyXmglJcsjShjlList.size() > 0) {
                            DchyXmglJcsjShjl dchyXmglJcsjShjl = dchyXmglJcsjShjlList.get(0);
                            processInfo.put("BLJG", convertShjg(dchyXmglJcsjShjl.getShjg()));
                            processInfo.put("YJ", dchyXmglJcsjShjl.getShyj());
                        }
                    }
                }
            }
            message = ResponseUtil.wrapSuccessResponse();
            message.getData().put("dataList", processInfoList);
        } else {
            message = ResponseUtil.wrapResponseBodyByMsgCode(ResponseMessage.CODE.PARAMETER_FAIL.getCode(), ResponseMessage.CODE.PARAMETER_FAIL.getMsg());
        }

        return message;
    }

    private static String convertShjg(String shjg) {
        if (StringUtils.equals(shjg, Constants.SHTG)) {
            return "通过";
        } else {
            return "不通过";
        }
    }

    @Override
    public String queryXmidByJcsjsqxxid(String jcsjsqxxid) {
        String xmid = "";
        if (StringUtils.isNotBlank(jcsjsqxxid)) {
            Example example = new Example(DchyXmglSqxx.class);
            example.createCriteria().andEqualTo("glsxid", jcsjsqxxid);
            List<DchyXmglSqxx> dchyXmglSqxxList = Lists.newArrayList();
            if (CollectionUtils.isNotEmpty(dchyXmglSqxxList) && dchyXmglSqxxList.size() > 0) {
                DchyXmglSqxx dchyXmglSqxx = new DchyXmglSqxx();
                xmid = dchyXmglSqxx.getSqxxid();
            }
        }
        return xmid;
    }
}
