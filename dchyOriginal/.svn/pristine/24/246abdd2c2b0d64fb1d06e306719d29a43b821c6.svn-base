package cn.gtmap.onemap.server.thirdparty.kanq.user;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.5.0
 * 2013-12-27T11:07:04.979+08:00
 * Generated source version: 2.5.0
 * 
 */
@WebServiceClient(name = "user", 
                  wsdlLocation = "http://172.18.2.70:7879/user_ser/services/user?wsdl",
                  targetNamespace = "http://service.ser.kanq.com") 
public class User extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://service.ser.kanq.com", "user");
    public final static QName UserHttpSoap12Endpoint = new QName("http://service.ser.kanq.com", "userHttpSoap12Endpoint");
    public final static QName UserPort = new QName("http://service.ser.kanq.com", "userPort");
    static {
        URL url = null;
        try {
            url = new URL("http://172.18.2.70:7879/user_ser/services/user?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(User.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://172.18.2.70:7879/user_ser/services/user?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public User(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public User(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public User() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns UserPortType
     */
    @WebEndpoint(name = "userHttpSoap12Endpoint")
    public UserPortType getUserHttpSoap12Endpoint() {
        return super.getPort(UserHttpSoap12Endpoint, UserPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserPortType
     */
    @WebEndpoint(name = "userHttpSoap12Endpoint")
    public UserPortType getUserHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(UserHttpSoap12Endpoint, UserPortType.class, features);
    }
    /**
     *
     * @return
     *     returns UserPortType
     */
    @WebEndpoint(name = "userPort")
    public UserPortType getUserPort() {
        return super.getPort(UserPort, UserPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserPortType
     */
    @WebEndpoint(name = "userPort")
    public UserPortType getUserPort(WebServiceFeature... features) {
        return super.getPort(UserPort, UserPortType.class, features);
    }

}
