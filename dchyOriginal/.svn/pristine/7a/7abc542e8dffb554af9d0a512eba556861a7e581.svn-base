package cn.gtmap.msurveyplat.promanage.core.service.impl;


import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.EntityMapper;
import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.Example;
import cn.gtmap.msurveyplat.common.core.support.mybatis.page.repository.Repository;
import cn.gtmap.msurveyplat.common.domain.dchyxmgl.DchyXmglChxmChdwxx;
import cn.gtmap.msurveyplat.common.domain.dchyxmgl.DchyXmglClcg;
import cn.gtmap.msurveyplat.common.domain.dchyxmgl.DchyXmglClcgShjl;
import cn.gtmap.msurveyplat.common.dto.ResponseMessage;
import cn.gtmap.msurveyplat.common.util.CommonUtil;
import cn.gtmap.msurveyplat.common.util.ResponseUtil;
import cn.gtmap.msurveyplat.promanage.core.mapper.DchyXmglChgcMapper;
import cn.gtmap.msurveyplat.promanage.core.service.DchyXmglZdService;
import cn.gtmap.msurveyplat.promanage.core.service.ResultsManagementService;
import cn.gtmap.msurveyplat.promanage.service.impl.ExchangeFeignServiceImpl;
import cn.gtmap.msurveyplat.promanage.utils.Constants;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.*;

import static cn.gtmap.msurveyplat.promanage.utils.UserUtil.getCurrentUserIds;

/**
 * @author <a href="mailto:lijingmo@gtmap.cn">lijun1</a>
 * @version 1.0, 2021/01/05
 * @description
 */
@Service
public class ResultsManagementServiceImpl implements ResultsManagementService {

    @Autowired
    private Repository repository;

    @Autowired
    private DchyXmglChgcMapper dchyXmglChgcMapper;

    @Autowired
    private ExchangeFeignServiceImpl dispatchOrderFsmServiceImpl;

    @Autowired
    private EntityMapper entityMapper;

    @Autowired
    private DchyXmglZdService dchyXmglZdService;

    private Logger logger = LoggerFactory.getLogger(ResultsManagementServiceImpl.class);

    /**
     * 成果管理台账
     *
     * @return
     */
    @Override
    public Page<Map<String, Object>> queryResultsManagement(Map<String, Object> map) {
        Map<String, Object> data = (Map<String, Object>) map.get("data");
        String gcbh = CommonUtil.formatEmptyValue(data.get("gcbh"));
        String gcmc = CommonUtil.formatEmptyValue(data.get("gcmc"));
        String chdwmc = CommonUtil.formatEmptyValue(data.get("chdwmc"));
        String xmzt = CommonUtil.formatEmptyValue(data.get("xmzt"));
        String xmcgzt = CommonUtil.formatEmptyValue(data.get("xmcgzt"));
        String babh = CommonUtil.formatEmptyValue(data.get("babh"));
        int page = Integer.parseInt(CommonUtil.formatEmptyValue(data.get("page")));
        int pageSize = Integer.parseInt(CommonUtil.formatEmptyValue(data.get("pageSize")));
        Map<String, Object> paramMap = Maps.newHashMap();
        paramMap.put("gcbh", gcbh);
        paramMap.put("gcmc", gcmc);
        paramMap.put("xmcgzt", xmcgzt);
        List<String> ztArr = new ArrayList<>();
        if (StringUtils.isNotBlank(xmzt)) {
            if (xmzt.indexOf(",") != -1) {//未办结
                String[] xmztArray = xmzt.split(",");
                for (String zt : xmztArray) {
                    ztArr.add(zt);
                }
                if (CollectionUtils.isNotEmpty(ztArr)) {
                    paramMap.put("dba", ztArr.get(0));//已备案
                    paramMap.put("yba", ztArr.get(1));//待备案
                }
            } else {//99：已办结
                paramMap.put("xmzt", xmzt);
            }
        }

        paramMap.put("babh", babh);
        //条件查询，根据测绘单位名称
        if (StringUtils.isNotEmpty(chdwmc)) {
            Example example = new Example(DchyXmglChxmChdwxx.class);
            example.createCriteria().andLike("chdwmc", chdwmc);
            List<DchyXmglChxmChdwxx> chdwxxList = entityMapper.selectByExampleNotNull(example);
            List chxmidList = Lists.newArrayList();
            if (CollectionUtils.isNotEmpty(chdwxxList)) {
                for (DchyXmglChxmChdwxx chdwxxLists : chdwxxList) {
                    String chxmid = chdwxxLists.getChxmid();
                    chxmidList.add(chxmid);
                }
                paramMap.put("chxmidList", chxmidList);
            }
        }

        Page<Map<String, Object>> resultList = null;
        try {
            resultList = repository.selectPaging("queryChgcxxByPage", paramMap, page - 1, pageSize);
            if (resultList != null) {
                for (Map<String, Object> resultLists : resultList) {
                    String chxmid = MapUtils.getString(resultLists, "CHXMID");
                    //组织测绘单位
                    Example chdwxxExample = new Example(DchyXmglChxmChdwxx.class);
                    chdwxxExample.createCriteria().andEqualTo("chxmid", chxmid);
                    List<DchyXmglChxmChdwxx> chdwxxList = entityMapper.selectByExampleNotNull(chdwxxExample);
                    if (CollectionUtils.isNotEmpty(chdwxxList)) {
                        List<String> chdwmcList = Lists.newArrayList();
                        for (DchyXmglChxmChdwxx chdwxxLists : chdwxxList) {
                            String chdwmcxx = chdwxxLists.getChdwmc();
                            chdwmcList.add(chdwmcxx);
                        }
                        resultLists.put("CHDWMC", chdwmcList);
                    }

                    //组织办结状态
                    if (StringUtils.isNotEmpty(CommonUtil.ternaryOperator(resultLists.get("XMZT")))) {
                        String xmztdm = CommonUtil.ternaryOperator(resultLists.get("XMZT"));
                        if (StringUtils.equals(xmztdm, Constants.DCHY_XMGL_CHXM_XMZT_YBJ)) {
                            resultLists.put("XMZT", "已办结");
                        } else {
                            resultLists.put("XMZT", "未办结");
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
        }
        return resultList;
    }

    /**
     * @param map
     * @return
     * @description 2021/6/1 成果提交待办列表
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @Override
    public ResponseMessage queryResultsManagementDb(Map<String, Object> map) {
        ResponseMessage message;

        int page = Integer.parseInt(map.get("page") != null ? map.get("page").toString() : Constants.DCHY_XMGL_PAGINATION_PAGE);
        int pageSize = Integer.parseInt(map.get("size") != null ? map.get("size").toString() : Constants.DCHY_XMGL_PAGINATION_SIZE);

        HashMap mapParam = Maps.newHashMap();
        //获取流程中的待办列表的参数
        Pageable pageable = new Pageable() {
            @Override
            public int getPageNumber() {
                return page;
            }

            @Override
            public int getPageSize() {
                return pageSize;
            }

            @Override
            public int getOffset() {
                return 0;
            }

            @Override
            public Sort getSort() {
                return null;
            }

            @Override
            public Pageable next() {
                return null;
            }

            @Override
            public Pageable previousOrFirst() {
                return null;
            }

            @Override
            public Pageable first() {
                return null;
            }

            @Override
            public boolean hasPrevious() {
                return false;
            }
        };

        String userIds = getCurrentUserIds();
        if (StringUtils.isBlank(userIds)) {
            map.put("userIds", null);
        } else {
            map.put("userIds", userIds.split(","));
        }
        map.put("lcmc", Constants.DCHY_XMGL_CZCGTJ_LCMC);
        mapParam.put("pageable", pageable);
        mapParam.put("param", map);
        //组织参数获取待办列表的数据
        Map<String, Object> result = dispatchOrderFsmServiceImpl.getTaskList(mapParam);
        List<Map<String, Object>> content = (List<Map<String, Object>>) result.get("content");

        if (CollectionUtils.isNotEmpty(content)) {
            for (Map<String, Object> m1 : content) {
                String xmid = CommonUtil.formatEmptyValue(MapUtils.getString(m1, "text9"));
                String taskid = CommonUtil.formatEmptyValue(MapUtils.getString(m1, "taskId"));
                String gzlslid = CommonUtil.formatEmptyValue(MapUtils.getString(m1, "procInsId"));
                //通过sqxxid获取与之关联的信息
                if (StringUtils.isNotBlank(xmid)) {
                    Example exampleClcg = new Example(DchyXmglClcg.class);
                    exampleClcg.createCriteria().andEqualTo("sqxxid", xmid);
                    List<DchyXmglClcg> dchyXmglClcgList = entityMapper.selectByExample(exampleClcg);
                    if (CollectionUtils.isNotEmpty(dchyXmglClcgList)) {
                        Map<String, Object> paramMap = Maps.newHashMap();
                        List<String> chxmidList = Lists.newArrayList();
                        for (DchyXmglClcg dchyXmglClcg : dchyXmglClcgList) {
                            chxmidList.add(dchyXmglClcg.getChxmid());
                        }
                        paramMap.put("chxmidList", chxmidList);
                        List<Map<String, Object>> sqxxList = dchyXmglChgcMapper.queryChgcLcxx(paramMap);
                        if (CollectionUtils.isNotEmpty(sqxxList)) {
                            Map<String, Object> map2 = sqxxList.get(0);
//                            String sqxxid = CommonUtil.formatEmptyValue(map2.get("SQXXID"));
//                            if (StringUtils.isNotBlank(sqxxid)) {
                            Example example = new Example(DchyXmglClcgShjl.class);
                            example.createCriteria().andEqualTo("sqxxid", xmid);
                            List<DchyXmglClcgShjl> dchyXmglClcgShjlList = entityMapper.selectByExample(example);
                            if (CollectionUtils.isNotEmpty(dchyXmglClcgShjlList)) {
                                DchyXmglClcgShjl dchyXmglClcgShjl = dchyXmglClcgShjlList.get(0);
                                map2.put("CGTJZTMC", convertShzt(dchyXmglClcgShjl.getShzt()));
                            }
//                            }
                            m1.putAll(map2);
                        }
                    }
                }
            }
        }
        message = ResponseUtil.wrapSuccessResponse();
        message.setData(result);
        return message;
    }

    /**
     * @param map
     * @return
     * @description 2021/6/1 成果提交已办列表
     * @author <a href="mailto:liuqiang@gtmap.cn">liuqiang</a>
     */
    @Override
    public ResponseMessage queryResultsManagementYb(Map<String, Object> map) {
        ResponseMessage message = new ResponseMessage();

        int page = Integer.parseInt(map.get("page") != null ? map.get("page").toString() : Constants.DCHY_XMGL_PAGINATION_PAGE);
        int pageSize = Integer.parseInt(map.get("size") != null ? map.get("size").toString() : Constants.DCHY_XMGL_PAGINATION_SIZE);

        HashMap mapParam = Maps.newHashMap();
        //获取流程中的待办列表的参数
        Pageable pageable = new Pageable() {
            @Override
            public int getPageNumber() {
                return page;
            }

            @Override
            public int getPageSize() {
                return pageSize;
            }

            @Override
            public int getOffset() {
                return 0;
            }

            @Override
            public Sort getSort() {
                return null;
            }

            @Override
            public Pageable next() {
                return null;
            }

            @Override
            public Pageable previousOrFirst() {
                return null;
            }

            @Override
            public Pageable first() {
                return null;
            }

            @Override
            public boolean hasPrevious() {
                return false;
            }
        };

        String userIds = getCurrentUserIds();
        if (StringUtils.isBlank(userIds)) {
            map.put("userIds", null);
        } else {
            map.put("userIds", userIds.split(","));
        }
        map.put("lcmc", Constants.DCHY_XMGL_CZCGTJ_LCMC);
        mapParam.put("pageable", pageable);
        mapParam.put("param", map);
        //组织参数获取已办列表的数据
        Map<String, Object> result = dispatchOrderFsmServiceImpl.getTaskOverList(mapParam);
        List<Map<String, Object>> content = (List<Map<String, Object>>) result.get("content");

        if (CollectionUtils.isNotEmpty(content)) {
            for (Map<String, Object> m1 : content) {
                String xmid = CommonUtil.formatEmptyValue(MapUtils.getString(m1, "text9"));
                String taskid = CommonUtil.formatEmptyValue(MapUtils.getString(m1, "taskId"));
                String gzlslid = CommonUtil.formatEmptyValue(MapUtils.getString(m1, "procInsId"));
                //通过sqxxid获取与之关联的信息
                if (StringUtils.isNotBlank(xmid)) {
                    Example exampleClcg = new Example(DchyXmglClcg.class);
                    exampleClcg.createCriteria().andEqualTo("sqxxid", xmid);
                    List<DchyXmglClcg> dchyXmglClcgList = entityMapper.selectByExample(exampleClcg);
                    if (CollectionUtils.isNotEmpty(dchyXmglClcgList)) {
                        Map<String, Object> paramMap = Maps.newHashMap();
                        List<String> chxmidList = Lists.newArrayList();
                        for (DchyXmglClcg dchyXmglClcg : dchyXmglClcgList) {
                            chxmidList.add(dchyXmglClcg.getChxmid());
                        }
                        paramMap.put("chxmidList", chxmidList);
                        List<Map<String, Object>> sqxxList = dchyXmglChgcMapper.queryChgcLcxx(paramMap);
                        if (CollectionUtils.isNotEmpty(sqxxList)) {
                            Map<String, Object> map2 = sqxxList.get(0);
//                            String sqxxid = CommonUtil.formatEmptyValue(map2.get("SQXXID"));
//                            if (StringUtils.isNotBlank(sqxxid)) {
                            Example example = new Example(DchyXmglClcgShjl.class);
                            example.createCriteria().andEqualTo("sqxxid", xmid);
                            List<DchyXmglClcgShjl> dchyXmglClcgShjlList = entityMapper.selectByExample(example);
                            if (CollectionUtils.isNotEmpty(dchyXmglClcgShjlList)) {
                                DchyXmglClcgShjl dchyXmglClcgShjl = dchyXmglClcgShjlList.get(0);
                                map2.put("CGTJZTMC", convertShzt(dchyXmglClcgShjl.getShzt()));
                            }
//                            }
                            m1.putAll(map2);
                        }
                    }
                }
            }
        }
        message = ResponseUtil.wrapSuccessResponse();
        message.setData(result);
        return message;
    }

    //去除重复的成果提交状态
    private List removeDuplicates(List list) {
        List resultList = Lists.newArrayList();
        if (CollectionUtils.isNotEmpty(list)) {
            for (Object object : list) {
                if (!resultList.contains(object)) {
                    resultList.add(object);
                }
            }
        }
        return resultList;
    }

    private String convertShzt(String dm) {
        String mc = "/";
        if (StringUtils.isNotBlank(dm)) {
            switch (dm) {
                case Constants.DCHY_XMGL_SHZT_DSH:
                    mc = "待审核";
                    break; //可选
                case Constants.DCHY_XMGL_SHZT_SHZ:
                    mc = "审核中";
                    break; //可选
                case Constants.DCHY_XMGL_SHZT_TH:
                    mc = "已退回";
                    break; //可选
                case Constants.DCHY_XMGL_SHZT_SHTG:
                    mc = "已入库";
                    break; //可选
                default: //可选
                    mc = "/";
            }
        }
        return mc;
    }

}
