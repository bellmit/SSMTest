package cn.gtmap.msurveyplat.promanage.service.impl;

import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.EntityMapper;
import cn.gtmap.msurveyplat.promanage.core.mapper.DchyXmglSjclpzMapper;
import cn.gtmap.msurveyplat.promanage.model.ReceiveConfigModel;
import cn.gtmap.msurveyplat.promanage.service.ConfigureSystemService;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.gtis.common.util.UUIDGenerator;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

/**
 * @author 6k2
 * @email <a href="mailto:laukaye@qq.com">Email To</a>
 * @date 2021/4/15
 * @desc IntelliJ IDEA: IntelliJ IDEA
 */

@Transactional(readOnly = true)
@Service
public class ConfigureSystemServiceImpl implements ConfigureSystemService {

    protected final Log logger = LogFactory.getLog(getClass());

    @Autowired
    private EntityMapper entityMapper;

    @Autowired
    private DchyXmglSjclpzMapper dchyXmglSjclpzMapper;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public Boolean addConfigure(ReceiveConfigModel receiveConfigModel) {
        int a = 0;
        try {
            String id = UUIDGenerator.generate18();
            receiveConfigModel.setSjclpzid(id);
            a = entityMapper.saveOrUpdate(receiveConfigModel, receiveConfigModel.getSjclpzid());
        } catch (Exception e) {
            throw e;
        }
        return 1 <= a;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public Boolean editConfigure(ReceiveConfigModel receiveConfigModel) {
        return 1 >= entityMapper.saveOrUpdate(receiveConfigModel, receiveConfigModel.getSjclpzid());
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean dropConfigure(String id) {
        entityMapper.deleteByPrimaryKey(ReceiveConfigModel.class, id);
        return 1 >= entityMapper.deleteByPrimaryKey(ReceiveConfigModel.class, id);
    }

    @Override
    public List<Map<String, Object>> findConfigure() {
        List<Map<String, Object>> configList = dchyXmglSjclpzMapper.queryResultListMap();
        List<String>              ssmkIdList = dchyXmglSjclpzMapper.querySsmkId();
        List<Map<String, Object>> resultList = Lists.newArrayList();
        try {
            for (String ssmkId : ssmkIdList) {
                if (null == ssmkId || "".equals(ssmkId)) {
                    continue;
                }
                Map<String, Object> resultMap = Maps.newHashMap();
                resultMap.put("ssmkid", ssmkId);
                List<Map<String, Object>> receiveConfigModelsListTmp = Lists.newArrayList();
                for (Map<String, Object> receiveConfigModel : configList) {
                    if (null != ssmkId && ssmkId.equals(receiveConfigModel.get("SSMKID"))) {
                        resultMap.put("ssmk", receiveConfigModel.get("SSMK"));
                        receiveConfigModelsListTmp.add(receiveConfigModel);
                    }
                    resultMap.put("list", receiveConfigModelsListTmp);
                }
                resultList.add(resultMap);
            }
        } catch (Exception e) {
            logger.error(e.toString());
        }
        return resultList;
    }
}
