package cn.gtmap.onemap.platform.service.impl;

import cn.gtmap.onemap.platform.BaseServiceTest;
import cn.gtmap.onemap.platform.service.AgsGeometryService;
import cn.gtmap.onemap.platform.service.GeometryService;
import com.alibaba.fastjson.JSON;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.Polygon;
import org.geotools.geojson.feature.FeatureJSON;
import org.geotools.geojson.geom.GeometryJSON;
import org.junit.Test;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.referencing.crs.CoordinateReferenceSystem;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by panrong on 2018/4/11.
 */
public class GISServiceImplTestCgcs2000 extends BaseServiceTest {

	@Autowired
	private GISServiceImpl gisService;

	@Autowired
	private AgsGeometryService agsGeometryService;

	@Autowired
	private GeometryService geometryService;

	/**
	 * 属性查询测试
	 *
	 * @throws Exception
	 */
	@Test
	public void testAttributeQuery() throws Exception {
		String layerName = "XZQ_H_2009";
		String where = "objectid='17019' or objectid='17006'";
		String[] columns = null;
		boolean returnGeometry = true;
		String dataSource = "sde";
		List result = gisService.query(layerName, where, columns, returnGeometry, dataSource);
		print(JSON.toJSONString(result));
	}

	/**
	 * wkt数据空间查询测试
	 *
	 * @throws Exception
	 */
	@Test
	public void testSpaceQuery() throws Exception {
		String layerName = "XZQ_H_2009";
		String wkt = "POLYGON ((119.35415523446514 31.38530155823649, 119.37646911368505 31.39220823513789, 119.38443835626359 31.36245639617801, 119.35628036581942 31.361925113339442, 119.35415523446514 31.38530155823649))";
		String[] columns = new String[]{"XZQDM", "XZQMC"};
		String dataSource = "sde";
		List result = gisService.query(layerName, wkt, columns, dataSource);
		print(JSON.toJSONString(result));
	}

	/**
	 * Geometry数据空间查询测试
	 *
	 * @throws Exception
	 */
	@Test
	public void testGeometryQuery() throws Exception {
		String layerName = "DLTB_H_2009";
//        String geoJson = "{\"type\":\"Polygon\",\"coordinates\":[[[119.35415523446514,31.38530155823649],[119.37646911368505,31.39220823513789],[119.38443835626359,31.36245639617801],[119.35628036581942,31.361925113339442],[119.35415523446514,31.38530155823649]]]}";
		String geoJson = "{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]}";
		GeometryJSON geometryJSON = new GeometryJSON();
		Geometry geometry = geometryJSON.read(geoJson);
		String[] columns = new String[]{"OBJECTID", "BSM", "QSDWMC"};
		String dataSource = "sde";
		List result = gisService.query(layerName, geometry, columns, dataSource);
		print(JSON.toJSONString(result));
	}

	/**
	 * SimpleFeature数据空间查询，进行投影转换
	 *
	 * @throws Exception
	 */
	@Test
	public void testSimpleFeatureQuery() throws Exception {
		String layerName = "XZQ_H_2009";
		String geoJson = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[119.5138057274552,33.10599385165257],[119.53226780609549,33.10227487178259],[119.52894728835443,33.09071947004371],[119.49972673223311,33.09829025049332],[119.50809443694058,33.10532974810436],[119.5138057274552,33.10599385165257]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}\n";
		FeatureJSON featureJSON = new FeatureJSON();
		SimpleFeature simpleFeature = featureJSON.readFeature(geoJson);
		String[] columns = new String[]{"XZQDM", "XZQMC"};
		String dataSource = "sde";
		List result = gisService.query(layerName, simpleFeature, columns, dataSource);
		print(JSON.toJSONString(result));
	}

	/**
	 * wkt数据相交分析测试
	 *
	 * @throws Exception
	 */
	@Test
	public void testWktIntersect() throws Exception {
		String layerName = "XZQ_H_2009";
		String wktPolygon = "POLYGON ((119.35415523446514 31.38530155823649, 119.37646911368505 31.39220823513789, 119.38443835626359 31.36245639617801, 119.35628036581942 31.361925113339442, 119.35415523446514 31.38530155823649))";
		String[] returnField = new String[]{"XZQDM", "XZQMC"};
		String dataSource = "sde";
		List result = gisService.intersect(layerName, wktPolygon, returnField, dataSource);
		print(JSON.toJSONString(result));
	}

	/**
	 * polygon数据相交分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testPolygonIntersect() throws Exception {
		String layerName = "XZQ_H_2009";
		String geoJson = "{\"type\":\"Polygon\",\"coordinates\":[[[119.35415523446514,31.38530155823649],[119.37646911368505,31.39220823513789],[119.38443835626359,31.36245639617801],[119.35628036581942,31.361925113339442],[119.35415523446514,31.38530155823649]]]}";
		GeometryJSON geometryJSON = new GeometryJSON();
		Geometry geometry = geometryJSON.read(geoJson);
		Polygon polygon = (Polygon) geometry;
		String[] columns = null;
		String dataSource = "sde";
		List result = gisService.intersect(layerName, polygon, columns, dataSource);
		print(JSON.toJSONString(result));
	}

	/**
	 * geometry数据相交分析，可定义坐标
	 *
	 * @throws Exception
	 */
	@Test
	public void testGeometryIntersect() throws Exception {
		String layerName = "XZQ_H_2009";
		String geoJson = "{\"type\":\"Polygon\",\"coordinates\":[[[119.35415523446514,31.38530155823649],[119.37646911368505,31.39220823513789],[119.38443835626359,31.36245639617801],[119.35628036581942,31.361925113339442],[119.35415523446514,31.38530155823649]]]}";
		GeometryJSON geometryJSON = new GeometryJSON();
		Geometry geometry = geometryJSON.read(geoJson);
		CoordinateReferenceSystem sourceCRS = geometryService.parseUndefineSR("4490");
		String[] columns = null;
		String datasSource = "sde";
		List result = gisService.intersect(layerName, geometry, sourceCRS, columns, datasSource);
		print(JSON.toJSONString(result));
	}

	/**
	 * wkt数据与查询条件组合进行相交分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testPolygonWhereIntersect() throws Exception {
		String layerName = "XZQ_H_2009";
		String wktPolygon = "POLYGON ((119.35415523446514 31.38530155823649, 119.37646911368505 31.39220823513789, 119.38443835626359 31.36245639617801, 119.35628036581942 31.361925113339442, 119.35415523446514 31.38530155823649))";
		String[] columns = null;
		String dataSource = "sde";
		String where = "XZQDM='320481105015'";
		List result = gisService.intersect(layerName, wktPolygon, columns, dataSource, where);
		print(result);
	}

	/**
	 * Geometry数据相交分析new测试
	 *
	 * @throws Exception
	 */
	@Test
	public void testNewGeometryIntersect() throws Exception {
		String layerName = "XZQ_H_2009";
		String geoJson = "{\"type\":\"Polygon\",\"coordinates\":[[[119.35415523446514,31.38530155823649],[119.37646911368505,31.39220823513789],[119.38443835626359,31.36245639617801],[119.35628036581942,31.361925113339442],[119.35415523446514,31.38530155823649]]]}";
		GeometryJSON geometryJSON = new GeometryJSON();
		Geometry geometry = geometryJSON.read(geoJson);
		String[] returnField = null;
		String dataSource = "";
		List result = gisService.intersect(layerName, geometry, returnField, dataSource);
		print(result);
	}

	/**
	 * geoJson数据相交分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testGeoJsonIntersect() throws Exception {
		String layerName = "XZQ_H_2009";
		String geoJson = "{\"type\":\"Polygon\",\"coordinates\":[[[119.35415523446514,31.38530155823649],[119.37646911368505,31.39220823513789],[119.38443835626359,31.36245639617801],[119.35628036581942,31.361925113339442],[119.35415523446514,31.38530155823649]]]}";
		String[] outField = null;
		String dataSource = "sde";
		List result = gisService.intersectByGeoJSON(layerName, geoJson, outField, dataSource);
		print(result);
	}

	/**
	 * geoJson相交分析2
	 *
	 * @throws Exception
	 */
	@Test
	public void testIntersect2() throws Exception {
		String layerName = "XZQ_H_2009";
		String geoJson = "{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[120.52489718412944,33.482387733096594],[120.5277327767218,33.48298922243436],[120.52635794394975,33.48161438966231],[120.52489718412944,33.482387733096594]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4610\"}},\"properties\":{}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[120.52872093777671,33.48071215565565],[120.52975206235575,33.48157142613818],[120.53056836931415,33.480497338035015],[120.53013873407289,33.48019659336613],[120.52872093777671,33.48071215565565]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4610\"}},\"properties\":{}}]}";
		String[] outFields = null;
		String dataSource = "sde";
		List result = gisService.intersect2(layerName, geoJson, outFields, dataSource);
		print(result);
	}

	/**
	 * geometry图形difference分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testGeometryDifference() throws Exception {
		String layerName = "XZQ_H_2009";
		String geoJson = "{\"type\":\"Polygon\",\"coordinates\":[[[119.20280603582775,32.71390711678849],[119.21034361109994,32.71281134593394],[119.21044322663218,32.70749851754825],[119.20068090447349,32.706469157048524],[119.19995039057045,32.70998890585405],[119.20280603582775,32.71390711678849]]]}";
		GeometryJSON geometryJSON = new GeometryJSON();
		Geometry geometry = geometryJSON.read(geoJson);
		String[] outFields = null;
		String dataSource = "sde";
		List result = gisService.difference(layerName, geometry, outFields, dataSource);
		print(result);
	}

	/**
	 * geoJson求异difference
	 *
	 * @throws Exception
	 */
	@Test
	public void testDifferenceByGeoJson() throws Exception {
		String layerName = "XZQ_H_2009";
		String geoJson = "{\"type\":\"Polygon\",\"coordinates\":[[[119.20280603582775,32.71390711678849],[119.21034361109994,32.71281134593394],[119.21044322663218,32.70749851754825],[119.20068090447349,32.706469157048524],[119.19995039057045,32.70998890585405],[119.20280603582775,32.71390711678849]]]}";
		String[] outFields = null;
		String dataSource = "sde";
		List result = gisService.differenceByGeoJson(layerName, geoJson, outFields, dataSource);
		print(result);
	}

	/**
	 * 相交分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testIntersect3() throws Exception {
		String layerName = "XZQ_H_2009";
		String geoJson = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[119.20280603582775,32.71390711678849],[119.21034361109994,32.71281134593394],[119.21044322663218,32.70749851754825],[119.20068090447349,32.706469157048524],[119.19995039057045,32.70998890585405],[119.20280603582775,32.71390711678849]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}";
		String[] outFields = null;
		String dataSource = "sde";
		List result = gisService.intersect3(layerName, geoJson, outFields, dataSource);
		print(JSON.toJSONString(result));
	}

	/**
	 * 插入rows数据
	 *
	 * @throws Exception
	 */
	@Test
	public void testInsertRows() throws Exception {
		String geoJson = "POLYGON (( 120.06983252 32.59658552, 120.06981508 32.59771915, 120.06965021 32.59768741, 120.0688866 32.59752871, 120.06870727 32.59749453, 120.0685742 32.59746034, 120.06844404 32.59743347, 120.06857943 32.59672344, 120.06832488 32.59665993, 120.0682381 32.59663795, 120.06807323 32.59659641, 120.06759591 32.5964253, 120.0667223 32.59611731, 120.06615241 32.59589483, 120.06565196 32.59571638, 120.06553336 32.59566748, 120.06531303 32.59557985, 120.06520141 32.59553545, 120.0648005 32.59603141, 120.06455502 32.59649668, 120.06450454 32.59667726, 120.06449758 32.59704754, 120.06443275 32.59739643, 120.06436411 32.59765156, 120.06392902 32.59753211, 120.06373684 32.59745856, 120.06241276 32.59699625, 120.0609717 32.59649822, 120.06101078 32.59645552, 120.0610465 32.59640873, 120.06173167 32.59556103, 120.06216032 32.5950546, 120.06205952 32.59498037, 120.06111017 32.59431, 120.06121166 32.5942087, 120.06120936 32.59414947, 120.06120703 32.59404821, 120.06121183 32.59396053, 120.06130519 32.59393595, 120.06166008 32.59378859, 120.06283888 32.59316791, 120.06311247 32.5930349, 120.06319286 32.59287813, 120.06320468 32.592534, 120.06320848 32.59221374, 120.06332403 32.59055783, 120.063332 32.59044198, 120.0634033 32.58882016, 120.06339973 32.58874266, 120.0635305 32.58874473, 120.06356464 32.58874458, 120.06356294 32.58871603, 120.06360173 32.58871458, 120.06375689 32.58871593, 120.06475951 32.58876765, 120.06606158 32.58882948, 120.06662967 32.5888534, 120.06673912 32.58885335, 120.06684825 32.58842159, 120.06689288 32.58822572, 120.06688289 32.58817098, 120.06684306 32.58814362, 120.06667387 32.58807211, 120.06666141 32.58804263, 120.06666387 32.58800052, 120.06669348 32.58768673, 120.06680031 32.58751189, 120.06690215 32.58731178, 120.06697407 32.58703588, 120.06699276 32.58674147, 120.06699263 32.58657468, 120.0669567 32.58641802, 120.06689386 32.58620579, 120.06673863 32.58617555, 120.06626396 32.5860722, 120.06608784 32.58605965, 120.06551473 32.58602711, 120.06513862 32.58600203, 120.06428492 32.58595446, 120.06391179 32.58592937, 120.06375061 32.58593198, 120.06338074 32.58593755, 120.06331056 32.58590519, 120.06319571 32.58584585, 120.06308088 32.5858297, 120.06300116 32.58584054, 120.0629629 32.58585406, 120.06289595 32.5858919, 120.0627971 32.58591085, 120.0627078 32.58589739, 120.06263256 32.58583785, 120.06269185 32.58564859, 120.06271428 32.58536113, 120.06270004 32.5852294, 120.06261231 32.58519112, 120.06208031 32.58506203, 120.06193599 32.58504534, 120.06185392 32.58501903, 120.06176337 32.58498554, 120.06163321 32.58496644, 120.06153982 32.5849593, 120.0614606 32.58494017, 120.06142945 32.58491144, 120.06134452 32.58483962, 120.06126811 32.58480134, 120.06098797 32.58474159, 120.06009377 32.58453841, 120.0600768 32.58454561, 120.06005419 32.58458394, 120.06005422 32.58462466, 120.06011945 32.5848498, 120.06022432 32.58514917, 120.06027833 32.58552282, 120.06034495 32.58575072, 120.06012019 32.58570093, 120.05984604 32.58567838, 120.05917473 32.58562317, 120.0578448 32.58549708, 120.05761407 32.58547521, 120.0575839 32.58538176, 120.05762333 32.58426446, 120.05774433 32.58424355, 120.05785614 32.58422422, 120.05833406 32.58418007, 120.0587984 32.58424691, 120.05940457 32.58431076, 120.05958502 32.58432977, 120.05978986 32.58434817, 120.05977066 32.58423489, 120.0598114 32.58387415, 120.05987928 32.5832868, 120.05993153 32.5831545, 120.05999268 32.58304208, 120.0600965 32.58300954, 120.06017776 32.58300759, 120.06026806 32.58302474, 120.06028507 32.58302983, 120.06042606 32.58307207, 120.06044642 32.58307816, 120.06083926 32.58317735, 120.0614455 32.58328535, 120.06157166 32.58332533, 120.06171358 32.5833553, 120.06196586 32.58337854, 120.06254146 32.58355178, 120.06304213 32.58365499, 120.06313673 32.58365828, 120.06317983 32.58328783, 120.06325179 32.58290748, 120.06344228 32.58155963, 120.0636092 32.58044664, 120.0636138 32.58041919, 120.06376845 32.57949547, 120.06381996 32.5789349, 120.06403916 32.57744284, 120.06421698 32.57626476, 120.06436067 32.57520009, 120.06455779 32.57393232, 120.06468774 32.57287922, 120.06479974 32.57221514, 120.06480704 32.57217507, 120.06486818 32.57185026, 120.06582424 32.57227503, 120.06643589 32.57258774, 120.06691953 32.57284634, 120.06704474 32.57296426, 120.06719271 32.57308457, 120.06734063 32.5731471, 120.06781851 32.57330096, 120.06808588 32.57336824, 120.06833047 32.57340663, 120.06861487 32.57341611, 120.068831 32.57343043, 120.06943398 32.57354087, 120.06996302 32.57366098, 120.07084476 32.57384831, 120.07138517 32.57395394, 120.07154313 32.57399465, 120.07172081 32.57404044, 120.07186847 32.57375621, 120.07197618 32.57330346, 120.07208381 32.57276883, 120.07207213 32.57238356, 120.07202036 32.57167084, 120.07191703 32.57047654, 120.07233291 32.57048709, 120.07246031 32.57048701, 120.07267144 32.5705023, 120.07344676 32.57056492, 120.07350504 32.57056963, 120.07463714 32.57063677, 120.0746881 32.57063982, 120.07519044 32.57066726, 120.07672297 32.57078345, 120.07823 32.57087191, 120.07980986 32.57099111, 120.08151346 32.57107941, 120.08312244 32.57119547, 120.08346244 32.57120757, 120.08356434 32.57119765, 120.08362257 32.57119021, 120.08370418 32.57126166, 120.08376252 32.57136765, 120.08380043 32.5714268, 120.08385917 32.57142189, 120.08396005 32.57138584, 120.08410164 32.57134228, 120.08430398 32.57130059, 120.08432892 32.57130728, 120.08420552 32.5717668, 120.08422887 32.57182597, 120.08423767 32.571895, 120.08417384 32.57214656, 120.08408389 32.57249921, 120.08403749 32.57270637, 120.08419231 32.57320682, 120.0842157 32.57332022, 120.08421006 32.57350023, 120.08416365 32.57370738, 120.08413474 32.57392685, 120.08405076 32.57443239, 120.08396681 32.57496752, 120.08386831 32.57551498, 120.08382763 32.57561117, 120.08371425 32.5758233, 120.0836125 32.5760083, 120.0845414 32.57592384, 120.08567704 32.57582445, 120.08607015 32.57579458, 120.08618665 32.5758093, 120.08637306 32.57584123, 120.08664111 32.5759742, 120.08743651 32.57637062, 120.08761715 32.57645433, 120.08781522 32.57650351, 120.08812105 32.57654768, 120.08905013 32.57665305, 120.08999089 32.57677567, 120.09067826 32.57687627, 120.09130739 32.57696211, 120.09152586 32.57702607, 120.09172759 32.57708862, 120.09189874 32.57714169, 120.09218146 32.57737818, 120.09244089 32.57760238, 120.09256616 32.57764914, 120.09276427 32.57773282, 120.09286621 32.57773768, 120.09310212 32.57776956, 120.09331893 32.57778696, 120.09336959 32.57826323, 120.09347817 32.57931283, 120.09359047 32.58048074, 120.09371365 32.58178819, 120.09380768 32.58260421, 120.09380882 32.58289702, 120.09381036 32.58329284, 120.09379408 32.5839017, 120.09374454 32.58507288, 120.09375395 32.58597897, 120.09378832 32.5864911, 120.09390339 32.58730759, 120.09400971 32.58783756, 120.09404814 32.58817419, 120.09405281 32.58860396, 120.09416011 32.5900687, 120.09426312 32.59148687, 120.09430234 32.59214495, 120.09430096 32.59214809, 120.09427303 32.5922113, 120.09427153 32.59221192, 120.09427001 32.59221254, 120.09418249 32.59224868, 120.09406762 32.5922609, 120.09404237 32.59225774, 120.0933933 32.5921764, 120.0919298 32.59191031, 120.09184301 32.59189542, 120.09143016 32.5918246, 120.09138937 32.5918176, 120.09118655 32.59181438, 120.0911455 32.59181373, 120.0911456 32.59181682, 120.09115283 32.59204793, 120.09115538 32.59212947, 120.09119279 32.59236139, 120.09120375 32.5924294, 120.09124601 32.59269141, 120.0912695 32.59284343, 120.0913438 32.59332417, 120.09142716 32.59386346, 120.09143389 32.59390704, 120.09144401 32.59397249, 120.09143972 32.59397236, 120.09142836 32.59397203, 120.09121806 32.5939659, 120.09120878 32.59396563, 120.09113129 32.59395398, 120.09106796 32.59395014, 120.08994681 32.59388221, 120.08926833 32.59384834, 120.08876329 32.59382917, 120.08876066 32.59383224, 120.0887369 32.59385995, 120.08872644 32.59387215, 120.08863182 32.59401036, 120.08862444 32.59402115, 120.08862854 32.59408424, 120.08862907 32.59409246, 120.08865615 32.59450917, 120.08862017 32.59456207, 120.08861728 32.59456373, 120.08861404 32.5945656, 120.08855295 32.59460076, 120.08850973 32.59462723, 120.0884533 32.59462871, 120.08843047 32.59462931, 120.08800514 32.59459638, 120.08785584 32.59458482, 120.08725195 32.59455009, 120.08698075 32.5945218, 120.08676503 32.59449931, 120.08666313 32.59448979, 120.08661841 32.59448057, 120.08649326 32.59445477, 120.08633095 32.59443252, 120.08623661 32.59445175, 120.08606278 32.59448232, 120.08601775 32.59449024, 120.08583842 32.59449219, 120.08575999 32.59449305, 120.08570449 32.59449365, 120.0856701 32.59449186, 120.08554235 32.59448518, 120.08540256 32.59447788, 120.08513462 32.59450363, 120.08499123 32.59453567, 120.0841729 32.59453935, 120.08415715 32.59453943, 120.0840849 32.59453292, 120.08394577 32.5945204, 120.08390583 32.5944549, 120.08390227 32.59444907, 120.08389799 32.59444206, 120.08381885 32.5943123, 120.08376737 32.59422789, 120.08368989 32.59410086, 120.08368163 32.59408732, 120.08365186 32.59403505, 120.08361093 32.5939632, 120.083468 32.59371231, 120.08340164 32.59371435, 120.08338329 32.59371545, 120.08300756 32.59373798, 120.08286489 32.59374653, 120.08281553 32.59375074, 120.08190185 32.59383343, 120.08190188 32.5938361, 120.08190496 32.59412435, 120.08190112 32.59412445, 120.08187791 32.59412507, 120.08173115 32.59413785, 120.08163231 32.59414044, 120.08159457 32.59413895, 120.08159466 32.59423307, 120.08121667 32.59425668, 120.08059101 32.59427072, 120.07969855 32.59431062, 120.07891464 32.59432747, 120.07808658 32.59438174, 120.07783265 32.59439825, 120.07771669 32.59437496, 120.07749306 32.594312, 120.07675589 32.59412085, 120.07532685 32.59375532, 120.07398507 32.59342523, 120.0726234 32.59306151, 120.07120542 32.59268658, 120.07110936 32.59266981, 120.07064276 32.59323929, 120.07044089 32.59346373, 120.0702321 32.59332645, 120.0698311 32.59305188, 120.06964222 32.59295665, 120.06920417 32.59273003, 120.0687269 32.59250591, 120.06838887 32.5923855, 120.06825632 32.59235191, 120.06792821 32.59220624, 120.06782565 32.59239702, 120.06732592 32.59314616, 120.06699828 32.59362875, 120.06638591 32.594406, 120.06677365 32.594532, 120.06688302 32.59457121, 120.06730722 32.59471122, 120.06863614 32.59513402, 120.06911005 32.59528241, 120.06929895 32.59534682, 120.06966018 32.5954588, 120.06983583 32.59551971, 120.06983252 32.59658552),( 120.07212464 32.58594981, 120.0719264 32.58634684, 120.0719044 32.58641922, 120.07189351 32.58660134, 120.07193693 32.5866404, 120.07198235 32.58666077, 120.07202219 32.58666232, 120.0722909 32.58668334, 120.07237792 32.58669223, 120.07239489 32.58669397, 120.0737847 32.58689471, 120.07400359 32.58691576, 120.07408636 32.58692372, 120.0743112 32.5851524, 120.07388107 32.58504185, 120.07393282 32.58487245, 120.07360181 32.58476758, 120.07320736 32.5846394, 120.07311081 32.58461377, 120.07296738 32.58456949, 120.07274696 32.58484957, 120.07243516 32.58529496, 120.07230081 32.58554581, 120.07212464 32.58594981))\",\"XZQDM\":\"321284111001\",\"XZQMC\":\"小杨村\",\"YSDM\":\"1000600100\"},{\"BSM\":19,\"FQXZQDM\":\"321302\",\"OBJECTID\":17019,\"SHAPE\":\"POLYGON (( 118.41291697 33.69667673, 118.41288504 33.6977786, 118.41288492 33.6977828, 118.41287963 33.69796518, 118.41286778 33.6981609, 118.4073323 33.69809104, 118.40580032 33.69804181, 118.40396895 33.69803112, 118.40248112 33.6980165, 118.40017522 33.69801743, 118.40004529 33.69801748, 118.39992082 33.69801753, 118.39891012 33.69799921, 118.39891614 33.69788784, 118.39892175 33.6977842, 118.39893913 33.69746299, 118.39896047 33.69719845, 118.39900839 33.69660439, 118.39901032 33.69655631, 118.39719995 33.69656801, 118.39714501 33.69760709, 118.3971369 33.69776177, 118.39713122 33.6978701, 118.3971226 33.69803465, 118.39481751 33.69801167, 118.39151983 33.69794974, 118.3868731 33.69792746, 118.38634445 33.69792492, 118.38619223 33.69792418, 118.38619336 33.6978049, 118.3859705 33.69780222, 118.38563131 33.69779812, 118.38423331 33.69778126, 118.3837155 33.697775, 118.38372363 33.69773588, 118.38375128 33.69760282, 118.38398456 33.69647995, 118.38403919 33.69626527, 118.38423773 33.695485, 118.3845798 33.69401032, 118.38479063 33.69295817, 118.3848161 33.69282522, 118.38479999 33.69268119, 118.38499015 33.69194757, 118.3850417 33.69168278, 118.38501237 33.69157544, 118.38502034 33.69149845, 118.38505676 33.69147497, 118.38516639 33.69147721, 118.38517445 33.69147737, 118.38567373 33.69148758, 118.3857108 33.69148833, 118.38603902 33.69149504, 118.38627157 33.69149979, 118.38630558 33.68846166, 118.38632644 33.68746935, 118.3863636 33.68520023, 118.38640452 33.68373857, 118.38724175 33.68374455, 118.38721283 33.68359955, 118.38718362 33.68345314, 118.3871618 33.68334373, 118.38691803 33.68191784, 118.38838554 33.68183397, 118.38842529 33.6818317, 118.38832832 33.68107159, 118.38829291 33.68107498, 118.38709345 33.68119002, 118.38707718 33.68072562, 118.38705973 33.68022747, 118.38705686 33.68014555, 118.38790121 33.68007001, 118.38789857 33.68000826, 118.38789559 33.6799382, 118.38789029 33.67981404, 118.38787519 33.67946028, 118.38785952 33.67909282, 118.3878484 33.67883216, 118.38761051 33.67884923, 118.38760167 33.67884986, 118.38754195 33.67885414, 118.38737396 33.67887676, 118.38600271 33.6790148, 118.38596956 33.67901838, 118.38561159 33.67790779, 118.38556512 33.67791569, 118.384691 33.67806412, 118.3846785 33.67806625, 118.38436174 33.67812003, 118.38419449 33.67814843, 118.38390029 33.67759214, 118.38370622 33.67712187, 118.3833619 33.67617625, 118.38282037 33.67456316, 118.3825948 33.6745683, 118.38232401 33.67457448, 118.38202265 33.67458135, 118.3820129 33.67458157, 118.38194832 33.67458305, 118.38184108 33.67458549, 118.38175606 33.67458743, 118.38165307 33.67458978, 118.38064701 33.67461168, 118.38059306 33.67461285, 118.38028676 33.67461952, 118.38028828 33.67455525, 118.38033062 33.67275963, 118.38033078 33.67275303, 118.38035212 33.67184783, 118.38035825 33.67120102, 118.38054992 33.67118053, 118.38090214 33.67114297, 118.3810743 33.67112462, 118.38098235 33.67083851, 118.38083107 33.67030023, 118.38098928 33.67029162, 118.38126623 33.67027653, 118.38164289 33.67026769, 118.38165296 33.67026745, 118.38200673 33.67025914, 118.38211655 33.67025656, 118.382172 33.67025526, 118.3822871 33.67025256, 118.38265941 33.67024595, 118.38276443 33.67024409, 118.38300182 33.67023987, 118.38311027 33.67023795, 118.38319167 33.6702365, 118.38329343 33.67023469, 118.3842014 33.67021857, 118.38422946 33.67056358, 118.38448787 33.67056069, 118.38466492 33.6705587, 118.38468245 33.67071547, 118.38459225 33.6707102, 118.3845991 33.67113708, 118.38523348 33.6711252, 118.38558658 33.67111859, 118.38565451 33.67111732, 118.38710645 33.67109012, 118.38708296 33.67056297, 118.3884783 33.67046781, 118.38851566 33.67046526, 118.38843567 33.66969388, 118.38835539 33.66895623, 118.38834406 33.66885208, 118.38833876 33.6688034, 118.38939559 33.66861428, 118.38942446 33.66860912, 118.38926723 33.66797508, 118.39001771 33.66785798, 118.39002452 33.66788312, 118.39005448 33.66799378, 118.39010906 33.66819535, 118.39021172 33.66857452, 118.39028002 33.66882678, 118.39029405 33.66887858, 118.38970621 33.66890235, 118.38996129 33.66987742, 118.38999454 33.66987318, 118.39040469 33.66982084, 118.39165487 33.66966128, 118.39168139 33.6696579, 118.39168084 33.66962359, 118.39183776 33.66959895, 118.39184414 33.66957028, 118.39185616 33.6694672, 118.39187621 33.66943838, 118.3920098 33.66939429, 118.39207352 33.66937325, 118.3920023 33.66877356, 118.39185175 33.66876954, 118.39179667 33.66846867, 118.3918555 33.66846259, 118.3937533 33.66819282, 118.39376045 33.66819177, 118.39379169 33.66818721, 118.39315576 33.66692476, 118.39293313 33.66648782, 118.39225376 33.66514366, 118.39159056 33.66376013, 118.39162863 33.66375299, 118.39289748 33.66351495, 118.39295635 33.66350391, 118.39313028 33.66421519, 118.39321165 33.66445202, 118.393495 33.6650787, 118.39383633 33.66586529, 118.39413086 33.66649801, 118.39419823 33.66664327, 118.39442396 33.66712997, 118.39451985 33.66733671, 118.39463128 33.66743411, 118.39470095 33.66749502, 118.39499661 33.66778475, 118.39533265 33.66811826, 118.39559807 33.66852787, 118.39555006 33.6685346, 118.39556796 33.66856433, 118.3958239 33.66898953, 118.39620452 33.66963823, 118.39630368 33.6698197, 118.39644356 33.67022973, 118.39662998 33.67083054, 118.39663142 33.67083517, 118.39666543 33.67094478, 118.39666644 33.67094803, 118.39668565 33.67100997, 118.39669495 33.67100904, 118.39790512 33.67088786, 118.39890645 33.67078059, 118.40029564 33.67062559, 118.40056502 33.67059113, 118.40065339 33.67057983, 118.40076822 33.67056514, 118.40089611 33.67054878, 118.40101964 33.67053299, 118.40114519 33.67051692, 118.40157806 33.67050583, 118.40174138 33.67190281, 118.40176648 33.67210501, 118.40194579 33.67355, 118.40206006 33.67454853, 118.40210107 33.67490684, 118.40212238 33.67509987, 118.40228333 33.67655738, 118.40238487 33.67733097, 118.40245652 33.67787688, 118.40254635 33.6786217, 118.40256129 33.67882101, 118.40256999 33.6789371, 118.40257342 33.68028196, 118.40257344 33.68028947, 118.40261682 33.68028811, 118.40273593 33.68027444, 118.40274732 33.68036631, 118.40275767 33.6803941, 118.40287669 33.68048474, 118.40298711 33.68057962, 118.40315423 33.6807243, 118.4032896 33.68083129, 118.4033333 33.6808556, 118.40336434 33.68086248, 118.40348182 33.68085805, 118.40363285 33.68083994, 118.4037308 33.68082942, 118.40383368 33.68082557, 118.40404092 33.68080977, 118.40439902 33.68077345, 118.40456661 33.68075295, 118.40456691 33.68077119, 118.4045758 33.68130359, 118.40458987 33.68221805, 118.40459129 33.68225024, 118.40459282 33.68228501, 118.40475789 33.68225878, 118.40520336 33.68220306, 118.40558734 33.68215776, 118.40591999 33.68211599, 118.4062013 33.68208412, 118.40656266 33.68204318, 118.40721699 33.68196361, 118.4075218 33.68192247, 118.40763927 33.68190662, 118.40763886 33.68194838, 118.40767844 33.68371302, 118.40835241 33.683727, 118.40833286 33.68186938, 118.40833608 33.68181226, 118.40851696 33.68178934, 118.40889962 33.68174887, 118.40926716 33.68170555, 118.4096132 33.68166352, 118.40974017 33.68165894, 118.41010015 33.68161782, 118.41025793 33.68160416, 118.41093723 33.6815118, 118.41126041 33.68146865, 118.4115096 33.68143538, 118.41159879 33.68142446, 118.41159388 33.68146357, 118.41150691 33.6817894, 118.41138013 33.68231496, 118.41132489 33.68252684, 118.41131977 33.68255935, 118.41155918 33.68256575, 118.41165274 33.68256739, 118.41189251 33.68256925, 118.41197774 33.68256918, 118.41282397 33.68260235, 118.41281966 33.68263017, 118.41281776 33.68264243, 118.41265843 33.68367063, 118.41263858 33.6838246, 118.41258767 33.68421956, 118.41256985 33.68435783, 118.41513316 33.68442122, 118.41512506 33.68460809, 118.41511304 33.6848851, 118.41501877 33.68488618, 118.41501431 33.68497469, 118.41497274 33.68580008, 118.41484323 33.68580485, 118.41483283 33.68580523, 118.41478983 33.68580681, 118.41479416 33.68708642, 118.4147832 33.68748955, 118.4148285 33.6874894, 118.41477031 33.68897329, 118.41477521 33.68904238, 118.41570125 33.68905655, 118.41629867 33.68906481, 118.4165266 33.68906796, 118.41647024 33.69246866, 118.41642278 33.69585356, 118.41618464 33.69585453, 118.41577591 33.69585619, 118.41507163 33.69585904, 118.41495194 33.69585952, 118.41358917 33.69587434, 118.41342354 33.69587615, 118.41340647 33.69587633, 118.41292072 33.69588161, 118.41291697 33.69667673),( 118.38250122 33.67113403, 118.38214739 33.67114691, 118.38214388 33.67114704, 118.38208263 33.67114927, 118.3819754 33.67115317, 118.38165415 33.67116487, 118.38127787 33.67117857, 118.38110823 33.67118474, 118.38129266 33.67151156, 118.3816232 33.67204193, 118.38167279 33.67212216, 118.38188103 33.67211712, 118.38194805 33.67211549, 118.38203806 33.67211331, 118.38225574 33.67210804, 118.38250618 33.67210197, 118.38408195 33.67206378, 118.38407476 33.67161507, 118.38283534 33.67164689, 118.38283767 33.67112178, 118.38250122 33.67113403))";
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("shape", geoJson);
		map.put("crs", "\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}");
		map.put("FQXZQDM", "320102");
		map.put("XZQMC", "测试村1299");
		List<Map<String, Object>> featureList = new ArrayList<Map<String, Object>>();
		featureList.add(map);
		String layerName = "xzq_h_2009";
		String dataSource = "sde";
		int result = gisService.insertRows(layerName, featureList, dataSource);
		print(result);
	}

	/**
	 * 插入columns数据
	 *
	 * @throws Exception
	 */
	@Test
	public void testInsertColumns() throws Exception {
		String insertWkt = "POLYGON ((119.35415523446514 31.38530155823649, 119.37646911368505 31.39220823513789, 119.38443835626359 31.36245639617801, 119.35628036581942 31.361925113339442, 119.35415523446514 31.38530155823649))";
		Map<String, Object> insertMap = new HashMap<String, Object>();
		insertMap.put("SHAPE", insertWkt);
		insertMap.put("FQXZQDM", "320102");
		insertMap.put("XZQMC", "测试922");
		String layerName = "XZQ_H_2009";
		String dataSource = "sde";
		String result = gisService.insert(layerName, insertMap, dataSource);
		print(result);
	}

	/**
	 * 插入GeoJson格式数据
	 *
	 * @throws Exception
	 */
	@Test
	public void testInsertGeoJson() throws Exception {
		String layerName = "XZQ_H_2009";
		String dataSource = "sde";
		String geoJson = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.5976084723426,33.53434064024901],[118.62417261427106,33.50777649832055],[118.58698281557122,33.501401104257724],[118.5976084723426,33.53434064024901]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{\"FQXZQDM\":\"320102\"}}";
		String result = gisService.insert(layerName, geoJson, dataSource);
		print(result);
	}

	/**
	 * 插入GeoJson格式数据，返回GeoJson格式数据
	 *
	 * @throws Exception
	 */
	@Test
	public void testInsert2GeoJson() throws Exception {
		String layerName = "XZQ_H_2009";
		String dataSource = "sde";
		String geoJson = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.5976084723426,33.53434064024901],[118.62417261427106,33.50777649832055],[118.58698281557122,33.501401104257724],[118.5976084723426,33.53434064024901]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{\"FQXZQDM\":\"320102\"}}";
		String result = gisService.insert2(layerName, geoJson, dataSource);
		print(result);
	}

	/**
	 * 插入geoJson数据，并通过check参数设置是否进行拓扑检查
	 *
	 * @throws Exception
	 */
	@Test
	public void testInsert2GeoJsonCheck() throws Exception {
		String layerName = "XZQ_H_2009";
		String dataSource = "sde";
		boolean check = true;
		String geoJson = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.5976084723426,33.53434064024901],[118.62417261427106,33.50777649832055],[118.58698281557122,33.501401104257724],[118.5976084723426,33.53434064024901]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{\"FQXZQDM\":\"320102\"}}";
		String result = gisService.insert2(layerName, geoJson, check, dataSource);
		print(result);
	}

	/**
	 * 插入数据，返回GeoJson
	 *
	 * @throws Exception
	 */
	@Test
	public void testInsert2GeoJsonCheckCreateDate() throws Exception {
		String layerName = "XZQ_H_2009";
		String dataSource = "sde";
		boolean check = true;
		boolean createDate = true;
		String geoJson = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.5976084723426,33.53434064024901],[118.62417261427106,33.50777649832055],[118.58698281557122,33.501401104257724],[118.5976084723426,33.53434064024901]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{\"FQXZQDM\":\"320102\"}}";
		String result = gisService.insert3(layerName, geoJson, check, createDate, dataSource);
		print(result);
	}

	/**
	 * 更新map数据
	 *
	 * @throws Exception
	 */
	@Test
	public void testColumnsUpdate() throws Exception {
		String layerName = "XZQ_H_2009";
		String pk = "18288";
		Map<String, Object> columns = new HashMap<String, Object>();
		columns.put("XZQMC", "测试12132");
		columns.put("shape", "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.5976084723426,33.53434064024901],[118.62417261427106,33.50777649832055],[118.58698281557122,33.501401104257724],[118.5976084723426,33.53434064024901]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{\"FQXZQDM\":\"320102\"}}");
		String dataSource = "sde";
		boolean result = gisService.update(layerName, pk, columns, dataSource);
		print(result);
	}

	/**
	 * 更新GeoJSon数据
	 *
	 * @throws Exception
	 */
	@Test
	public void testGeoJsonUpdate() throws Exception {
		String layerName = "XZQ_H_2009";
		String pk = "18288";
		String geoJson = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.5976084723426,33.53434064024901],[118.62417261427106,33.50777649832055],[118.58698281557122,33.501401104257724],[118.5976084723426,33.53434064024901]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{\"FQXZQDM\":\"320102\"}}";
		String dataSource = "sde";
		boolean result = gisService.update(layerName, pk, geoJson, dataSource);
		print(result);
	}

	/**
	 * 删除测试
	 *
	 * @throws Exception
	 */
	@Test
	public void testDelete() throws Exception {
		String layerName = "XZQ_H_2009";
		String pk = "18288";
		String dataSource = "sde";
		boolean result = gisService.delete(layerName, pk, dataSource);
		print(result);
	}

	/**
	 * 监测图斑分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testJctbAnalysis() throws Exception {
		String geometry = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}";
		String dataSource = "sde";
		String unit = "{\"alias\":\"公顷\"}";
		String analysisLayers = "[{\"layerName\":\"XZ_TDDC.DLTB_H_2009\",\"fid\":\"dltb\",\"fields\":\"*\",\"title\":\"地类图斑\"},{\"layerName\":\"XZ_TDDC.XZDW_H_2009\",\"fid\":\"xzdw\",\"fields\":\"*\",\"title\":\"线状地物\"}]";
		List layers = JSON.parseObject(analysisLayers, List.class);
		Map areaUnit = JSON.parseObject(unit, Map.class);
		Object result = gisService.jctbAnalysis(geometry, layers, dataSource, areaUnit, null,"");
		print(result);
	}

	/**
	 * 南通监测图斑分析（成图功能）
	 *
	 * @throws Exception
	 */
	@Test
	public void testJctbAnalysisNt() throws Exception {
		String geometry = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}";
		String analysisLayersStr = "[{\"layerName\":\"XZ_TDDC.DLTB_H_2009\",\"fid\":\"dltb\",\"fields\":\"*\",\"title\":\"地类图斑\"},{\"layerName\":\"XZ_TDDC.XZDW_H_2009\",\"fid\":\"xzdw\",\"fields\":\"*\",\"title\":\"线状地物\"}]";
		String dataSource = "sde";
		String unit = "{\"alias\":\"公顷\"}";
		List analysisLayers = JSON.parseObject(analysisLayersStr, List.class);
		Map areaUnit = JSON.parseObject(unit, Map.class);
		String methodType = "ntct";
		Object result = gisService.jctbAnalysis(geometry, analysisLayers, dataSource, areaUnit, null, methodType);
		print(result);
	}

	/**
	 * 土地利用现状分析，只扣除线物，只返回地类名称和对应的面积
	 *
	 * @throws Exception
	 */
	@Test
	public void testTdlyxzAnalysis() throws Exception {
		String dltbLayerName = "DLTB_H_2009";
		String xzdwLayerName = "XZDW_H_2009";
		String dataSource = "sde";
		String geometry = "{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]}";
		String[] outFields = null;
		Map<String, Object> result = gisService.tdlyxzAnalysis(dltbLayerName, xzdwLayerName, geometry, outFields, dataSource);
		print(result);
	}

	/**
	 * 土地利用现状分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testTdlyxzAnalysisRegionCode() throws Exception {
		String regionCode = "2009";
		String geometry = "{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]}";
		String dataSource = "sde";
		Map<String, Object> result = gisService.tdlyxzAnalysis(regionCode, geometry, dataSource);
		print(result);
	}

	/**
	 * 土地利用现状分析测试
	 *
	 * @throws Exception
	 */
	@Test
	public void testTdlyszAnalysis2() throws Exception {
		String dltbLayerName = "DLTB_H_2009";
		String xzdwLayerName = "XZDW_H_2009";
		String lxdwLayerName = null;
		String geometry = "{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]}";
		String dataSource = "sde";
		Map<String, Object> result = gisService.tdlyxzAnalysis2(dltbLayerName, xzdwLayerName, lxdwLayerName, geometry, dataSource);
		print(result);
	}


	/**
	 * 土地利用现状分析，南通定制
	 *
	 * @throws Exception
	 */
	@Test
	public void testTdlyxzAnalysisNt() throws Exception {
		String dltbLayerName = "DLTB_H_2009";
		String xzdwLayerName = "XZDW_H_2009";
		String geometry = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}\n";
		String dataSource = "sde";
		String unit = "{\"alias\":\"公顷\"}";
		Map<String, Object> result = gisService.tdlyxzAnalysisNt(dltbLayerName, xzdwLayerName, geometry, dataSource, unit);
		print(result);
	}

	/**
	 * 多年度现状分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testTdlyxzAnalysisMulti() throws Exception {
		String years = "[{\"year\":\"2015\",\"dltb\":\"DLTB_H_2015\",\"xzdw\":\"XZDW_H_2015\"},{\"year\":\"2009\",\"dltb\":\"DLTB_H_2009\",\"xzdw\":\"XZDW_H_2009\"}]";
		List yearList = JSON.parseObject(years, List.class);
		String geometry = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}\n";
		String dataSource = "sde";
		List<Map> result = gisService.tdlyxzAnalysisMulti(yearList, geometry, dataSource);
		print(result);
	}

	/**
	 * 调用cs发布的webservice进行分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testTdlyxzAnalysisByWcf() throws Exception {

	}

	/**
	 * 土地利用规划审查，单一类型分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testTdghscAnalysis() throws Exception {
		String layerType = "dltb";
		String regionCode = "2009";
		String geometry = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}";
		String[] outFields = null;
		String dataSource = "sde";
		List result = gisService.tdghscAnalysis(layerType, regionCode, geometry, outFields, dataSource);
		print(result);
	}

	/**
	 * 土地利用总体规划审查
	 *
	 * @throws Exception
	 */
	@Test
	public void testTdghscAnalysis2() throws Exception {
		String regionCode = "2009";
		String geometry = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}";
		String[] outFields = null;
		String dataSource = "sde";
		Map result = gisService.tdghscAnalysis2(regionCode, geometry, outFields, dataSource);
		print(result);
	}

	/**
	 * 综合分析new
	 *
	 * @throws Exception
	 */
	@Test
	public void testMuletAnalyze() throws Exception {
		String parmas = "[{\"areaorlenType\":\"area\",\"dataSource\":\"sde\",\"funid\": \"xz\",\"year\":\"2009\",\"relationType\":\"intersect\",\"returnFields\":\"\",\"visible\": true,\"whereClouse\":\"\"}]";
		List multiParams = JSON.parseObject(parmas, List.class);
		String geometry = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[119.20280603582775,32.71390711678849],[119.21034361109994,32.71281134593394],[119.21044322663218,32.70749851754825],[119.20068090447349,32.706469157048524],[119.19995039057045,32.70998890585405],[119.20280603582775,32.71390711678849]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}";
		String level = "standard";
		String tpl = null;
		Map result = gisService.multiAnalyze(multiParams, geometry, level, tpl);
		print(result);
	}

	/**
	 * 超出中心城区范围
	 *
	 * @throws Exception
	 */
	@Test
	public void testCenterAnalysis() throws Exception {
		String layersStr = "[{\"layerName\":\"DLTB_H_2009\",\"dataSource\":\"sde\",\"fields\":\"FQXZQDM\"},{\"layerName\":\"XZDW_H_2009\",\"dataSource\":\"sde\",\"fields\":\"FQXZQDM\"}]";
		List layers = JSON.parseObject(layersStr, List.class);
		String dataSource = "sde";
		String geometry = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}";
		List result = gisService.centerAnalysis(layers, null, dataSource, geometry);
		print(result);
	}

	/**
	 * 一般性分析
	 *
	 * @throws Exception
	 */
	@Test
	public void testAnalysis() throws Exception {
		String layerName = "DLTB_H_2009";
		String geometry = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[118.39391792076322,33.30995652418932],[118.39393095638951,33.30995788612042],[118.39392881621207,33.30994731494089],[118.3939167533937,33.30995023336469],[118.39391792076322,33.30995652418932]]]},\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4490\"}},\"properties\":{}}";
		String outFields = "FQXZQDM,DLMC";
		String dataSource = "sde";
		List result = gisService.analysis(layerName, geometry, outFields, dataSource);
		print(JSON.toJSONString(result));
	}


}
