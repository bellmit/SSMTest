package cn.gtmap.msurveyplat.serviceol.core.service.impl;

import cn.gtmap.msurveyplat.common.annotion.SystemLog;
import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.EntityMapper;
import cn.gtmap.msurveyplat.common.core.support.mybatis.mapper.Example;
import cn.gtmap.msurveyplat.common.core.support.mybatis.page.repository.Repo;
import cn.gtmap.msurveyplat.common.core.support.mybatis.page.repository.Repository;
import cn.gtmap.msurveyplat.common.domain.dchyxmgl.*;
import cn.gtmap.msurveyplat.common.dto.ResponseMessage;
import cn.gtmap.msurveyplat.common.util.*;
import cn.gtmap.msurveyplat.serviceol.core.mapper.DchyXmglGldwMapper;
import cn.gtmap.msurveyplat.serviceol.core.service.DchyXmglGldService;
import cn.gtmap.msurveyplat.serviceol.core.service.DchyXmglZdService;
import cn.gtmap.msurveyplat.serviceol.core.service.MessagePushService;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.model.MlkxxModel;
import cn.gtmap.msurveyplat.serviceol.core.service.mq.service.PushDataToMqService;
import cn.gtmap.msurveyplat.serviceol.log.LogAspect;
import cn.gtmap.msurveyplat.serviceol.utils.Constants;
import cn.gtmap.msurveyplat.serviceol.utils.UserUtil;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.gtis.common.util.UUIDGenerator;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.*;

/**
 * @author <a href="mailto:lijun1@gtmap.cn">lijun1</a>
 * @version 1.0, 2020/12/10 21:20
 * @description
 */
@Service
public class DchyXmglGldServiceImpl implements DchyXmglGldService {

    @Autowired
    private EntityMapper entityMapper;
    @Autowired
    private Repo repository;
    @Autowired
    private DchyXmglZdService dchyXmglZdService;
    @Resource(name = "repositoryXSBF")
    @Autowired
    private Repository repositoryXSBF;
    @Resource(name = "entityMapperXSBF")
    private EntityMapper entityMapperXSBF;
    @Autowired
    private DchyXmglGldwMapper gldwMapper;

    @Autowired
    private PushDataToMqService pushDataToMqService;

    @Autowired
    private MessagePushService messagePushService;

    private Logger logger = LoggerFactory.getLogger(LogAspect.class);

    @Override
    public Page<Map<String, Object>> queryChdwKpStatusByPage(Map<String, Object> data) {
        int page = Integer.parseInt(data.get("page") != null ? data.get("page").toString() : Constants.DCHY_XMGL_PAGINATION_PAGE);
        int pageSize = Integer.parseInt(data.get("size") != null ? data.get("size").toString() : Constants.DCHY_XMGL_PAGINATION_SIZE);
        HashMap<String, Object> map = Maps.newHashMap();
        String chdwmc = CommonUtil.ternaryOperator(data.get("chdwmc"));
        map.put("chdwmc", chdwmc.trim());
        Page<Map<String, Object>> kpInfoByPage = repository.selectPaging("queryChdwKpInfoByPage", map, page - 1, pageSize);
        if (CollectionUtils.isNotEmpty(kpInfoByPage.getContent())) {
            List<Map<String, Object>> content = kpInfoByPage.getContent();
            for (Map<String, Object> kp : content) {
                String sfyx = MapUtils.getString(kp, "SFYX");
                if (StringUtils.equals(sfyx, "0")) {
                    content.remove(kp);
                }
                if (StringUtils.equals(sfyx, "1") || null == sfyx) {
                    if (null != MapUtils.getString(kp, "XY")) {
                        kp.put("XYMC", dchyXmglZdService.getDchyXmglByZdlxAndDm(Constants.DCHY_XMGL_CHXM_XYD, MapUtils.getString(kp, "XY")).getMc());
                        kp.put("XYDJ", this.getCreditRate(MapUtils.getIntValue(kp, "XYMC")));
                    }
                    kp.put("ZZDJMC", dchyXmglZdService.getDchyXmglByZdlxAndDm(Constants.DCHY_XMGL_CHXM_ZZDJ, MapUtils.getString(kp, "ZZDJ")).getMc());
                }
            }
        }
        DataSecurityUtil.decryptMapList(kpInfoByPage.getContent());
        return kpInfoByPage;
    }

    /**
     * 新增测绘单位的考评记录
     *
     * @param data
     * @return
     */
    @Override
    @Transactional
    public DchyXmglKp saveChdwKpxx(Map<String, Object> data) {
        String kpId = CommonUtil.ternaryOperator(data.get("kpid"));
        String mlkId = CommonUtil.ternaryOperator(data.get("mlkid"));
        String xy = CommonUtil.ternaryOperator(data.get("xy"));
        String cgzl = CommonUtil.ternaryOperator(data.get("cgzl"));
        String myd = CommonUtil.ternaryOperator(data.get("myd"));
        String kpyj = CommonUtil.ternaryOperator(data.get("kpyj"));
        if (StringUtils.isNotBlank(kpId)) {
            /*更新已有考评记录*/
            DchyXmglKp xmglKp = entityMapper.selectByPrimaryKey(DchyXmglKp.class, kpId);
            if (null != xmglKp) {
                /*将之前考评记录置为无效*/
                xmglKp.setSfyx(Constants.INVALID);
                entityMapper.saveOrUpdate(xmglKp, xmglKp.getKpid());
            }
        }
        /*新增考评记录*/
        kpId = UUIDGenerator.generate18();
        DchyXmglKp dchyXmglKp = new DchyXmglKp();
        dchyXmglKp.setKpid(kpId);
        dchyXmglKp.setMlkid(mlkId);
        dchyXmglKp.setKpyj(kpyj);
        dchyXmglKp.setKpsj(new Date());
        dchyXmglKp.setKpry(UserUtil.getCurrentUserId());
        dchyXmglKp.setXy(xy);
        dchyXmglKp.setCgzl(cgzl);
        dchyXmglKp.setMyd(myd);
        dchyXmglKp.setSfyx(Constants.VALID);
        Double result = Double.parseDouble(xy) + Double.parseDouble(cgzl) + Double.parseDouble(myd);
        dchyXmglKp.setKpjg(Math.round(result / 3.0) + "");
        int flag = entityMapper.saveOrUpdate(dchyXmglKp, dchyXmglKp.getKpid());
        if (flag > 0) {
            //this.gldwKpMessageReminder(dchyXmglKp.getMlkid(), dchyXmglKp.getKpid());

            //用户消息
            String yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_GLDWPJ;
            String jsyhid = dchyXmglKp.getMlkid();
            String glsxid = dchyXmglKp.getKpid();
            Map<String, Object> paramMap = Maps.newHashMap();
            paramMap.put("yhxxpzid", yhxxpzid);
            paramMap.put("jsyhid", jsyhid);
            paramMap.put("glsxid", glsxid);
            messagePushService.updateYhxxInfo(paramMap);

            pushDataToMqService.pushKpMsgToMq(dchyXmglKp.getMlkid());
        }
        return dchyXmglKp;
    }

    /**
     * 获取管理单位考评记录
     *
     * @param data
     * @return
     */
    @Override
    public Page<Map<String, Object>> getGldwKpxxByMlkId(Map<String, Object> data) {
        int page = Integer.parseInt(data.get("page") != null ? data.get("page").toString() : "1");
        int pageSize = Integer.parseInt(data.get("size") != null ? data.get("size").toString() : "10");
        HashMap<String, Object> map = Maps.newHashMap();
        String mlkid = CommonUtil.ternaryOperator(data.get("mlkid"));
        String kpkssj = CommonUtil.ternaryOperator(data.get("kpkssj"));
        String kpjssj = CommonUtil.ternaryOperator(data.get("kpjssj"));
        String kpjg = CommonUtil.ternaryOperator(data.get("kpjg"));
        map.put("mlkid", mlkid);
        map.put("kpkssj", kpkssj);
        map.put("kpjssj", kpjssj);
        map.put("kpjg", kpjg);
        Page<Map<String, Object>> kpInfoByPage = repository.selectPaging("queryGldwKpInfoByPage", map, page - 1, pageSize);
        if (CollectionUtils.isNotEmpty(kpInfoByPage.getContent())) {
            List<Map<String, Object>> content = kpInfoByPage.getContent();
            for (Map<String, Object> kp : content) {
                if (null != MapUtils.getString(kp, "KPJG")) {
                    kp.put("KPJG", dchyXmglZdService.getDchyXmglByZdlxAndDm(Constants.DCHY_XMGL_CHXM_XYD, MapUtils.getString(kp, "KPJG")).getMc());
                    String str = this.getCreditRate(MapUtils.getIntValue(kp, "KPJG"));
                    kp.put("KPJG", str.substring(0, str.indexOf("（")));
                }
            }
        }
        DataSecurityUtil.decryptMapList(kpInfoByPage.getContent());
        return kpInfoByPage;
    }

    @Override
    @Transactional
    public void removeMlkById(Map<String, Object> data) {
        try {
            String mlkid = CommonUtil.ternaryOperator(data.get("mlkid"));
            List<String> list = (List<String>) data.get("ycyy");//移出原因
            String ycbcsm = CommonUtil.ternaryOperator(data.get("ycbcsm"));
            StringBuilder builder = new StringBuilder();
            String ycdw = CommonUtil.ternaryOperator(data.get("ycdw"));
            DchyXmglMlk xmglMlk = entityMapper.selectByPrimaryKey(DchyXmglMlk.class, mlkid);
            if (null != xmglMlk) {
                Example sqxxExample = new Example(DchyXmglSqxx.class);
                sqxxExample.createCriteria().andEqualTo("glsxid",xmglMlk.getMlkid());
                List<DchyXmglSqxx> sqxxList = entityMapper.selectByExample(sqxxExample);
                if(CollectionUtils.isNotEmpty(sqxxList)){
                    DchyXmglSqxx xmglSqxx = sqxxList.get(0);
                    if(null != xmglSqxx){
                        xmglSqxx.setBlsx("2");//2:移除名录库
                        entityMapper.saveOrUpdate(xmglSqxx,xmglSqxx.getSqxxid());
                    }
                }
                else {
                    /*初始化申请信息*/
                    DchyXmglSqxx xmglSqxx = new DchyXmglSqxx();
                    String sqxxid = UUIDGenerator.generate18();
                    xmglSqxx.setSqxxid(sqxxid);
                    xmglSqxx.setSqjgmc(xmglMlk.getDwmc());
                    xmglSqxx.setBlsx("2");//2:移除名录库
                    xmglSqxx.setSqr(UserUtil.getCurrentUserId());
                    xmglSqxx.setSqsj(new Date());
                    xmglSqxx.setSqzt("1");//1:待审核
                    xmglSqxx.setGlsxid(xmglMlk.getMlkid());
                    xmglSqxx.setSqbh(Calendar.getInstance().getTimeInMillis() + sqxxid);
                    xmglSqxx.setSqrmc(UserUtil.getCurrentUser().getUsername());
                    entityMapper.saveOrUpdate(xmglSqxx,xmglSqxx.getSqxxid());
                }
                /*置为无效状态*/
                xmglMlk.setSfyx(Constants.INVALID);
                xmglMlk.setYcdw(ycdw);
                xmglMlk.setYcsj(new Date());
                xmglMlk.setYcr(UserUtil.getCurrentUserId());
                for (String ycyy : list) {
                    builder.append(ycyy);
                }
                xmglMlk.setYcyy(builder.toString());
                xmglMlk.setYcbcsm(ycbcsm);
                int flag = entityMapper.saveOrUpdate(xmglMlk, xmglMlk.getMlkid());
                if (flag > 0) {

                    //用户消息
                    String yhxxpzid = Constants.DCHY_XMGL_ZD_XXNR_MLKYC;
                    Map<String, Object> paramMap = Maps.newHashMap();
                    paramMap.put("yhxxpzid", yhxxpzid);
                    paramMap.put("jsyhid", mlkid);
                    paramMap.put("glsxid", mlkid);
                    messagePushService.updateYhxxInfo(paramMap);

                    pushDataToMqService.pushKpMsgToMq(xmglMlk.getMlkid());
                }
            }
        } catch (Exception e) {
            logger.error("错误原因:{}", e);
        }
    }

    @Override
    public Page<Map<String, Object>> getChdwEvalByid(Map<String, Object> data) {
        int page = Integer.parseInt(data.get("page") != null ? data.get("page").toString() : "1");
        int pageSize = Integer.parseInt(data.get("size") != null ? data.get("size").toString() : "10");
        HashMap<String, Object> map = Maps.newHashMap();
        String mlkid = CommonUtil.ternaryOperator(data.get("mlkid"));
        String pjkssj = CommonUtil.ternaryOperator(data.get("pjkssj"));
        String pjjssj  = CommonUtil.ternaryOperator(data.get("pjjssj"));
        String fwpj = CommonUtil.ternaryOperator(data.get("fwpj"));
        map.put("mlkid", mlkid);
        map.put("pjkssj", pjkssj);
        map.put("pjjssj", pjjssj);
        map.put("fwpj", fwpj);
        Page<Map<String, Object>> jsdwPlInfoByPage = repositoryXSBF.selectPaging("queryJsdwPlInfoByPage", map, page - 1, pageSize);
        List<Map<String, Object>> content = jsdwPlInfoByPage.getContent();
        if (null != content && CollectionUtils.isNotEmpty(content)) {
            for (Map<String, Object> plInfo : content) {
                String tempFwpj = MapUtils.getString(plInfo, "FWPJ");
                if (StringUtils.isNotBlank(tempFwpj)) {
                    plInfo.put("MYD", this.getServiceEval(Integer.parseInt(tempFwpj)));
                }
            }
        }
        DataSecurityUtil.decryptMapList(jsdwPlInfoByPage.getContent());//解码
        return jsdwPlInfoByPage;
    }

    /**
     * 移除名录库之前需判断该测绘单位是否有在建的工程，如果有则不允许移除，只是不能再承接测绘项目
     *
     * @param data
     * @return
     */
    @Override
    @SystemLog(czmkMc = ProLog.CZMC_MLKDJ_CODE, czmkCode = ProLog.CZMC_MLKDJ_MC, czlxMc = ProLog.CZLX_SAVE_MC, czlxCode = ProLog.CZLX_SAVE_CODE)
    public boolean isConstructProject(Map<String, Object> data) {
        boolean flag = true;
        String mlkid = CommonUtil.ternaryOperator(data.get("mlkid"));
        DchyXmglMlk mlkXx = entityMapper.selectByPrimaryKey(DchyXmglMlk.class, mlkid);
        try {
            Example chdwExample = new Example(DchyXmglChxmChdwxx.class);
            chdwExample.createCriteria().andEqualTo("mlkid", mlkid);
            List<DchyXmglChxmChdwxx> chxmChdwxxList = entityMapper.selectByExample(chdwExample);
            if (CollectionUtils.isNotEmpty(chxmChdwxxList)) {
                for (DchyXmglChxmChdwxx chdwxx : chxmChdwxxList) {
                    if (null != chdwxx) {
                        String chxmid = chdwxx.getChxmid();
                        if (StringUtils.isNotBlank(chxmid)) {
                            DchyXmglChxm chxm = entityMapper.selectByPrimaryKey(DchyXmglChxm.class, chxmid);
                            /*判断该名录库下的项目是否都已办结*/
                            if (null != chxm) {
                                String xmzt = chxm.getXmzt();
                                if (StringUtils.isNotBlank(xmzt)) {
                                    if (!StringUtils.equals("99", xmzt)) {
                                        //项目没有办结
                                        flag = false;
                                        /*测绘单位将不能再承接新的项目*/
                                        if (!flag) {
                                            if (null != mlkXx) {
                                                mlkXx.setSfdj("1");//1：冻结
                                                entityMapper.saveOrUpdate(mlkXx, mlkXx.getMlkid());
                                                /*修改状态后 线上数据推送到线下*/
                                                pushDataToMqService.pushSfdjMlkMsgToMq(mlkXx.getMlkid(), new MlkxxModel());
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
//            e.printStackTrace();
            logger.error("错误信息:{}", e);
        }

        return flag;
    }

    @Override
    public Page<Map<String, Object>> getChdwPJxxById(Map<String, Object> data) {
        int page = Integer.parseInt(data.get("page") != null ? data.get("page").toString() : "1");
        int pageSize = Integer.parseInt(data.get("size") != null ? data.get("size").toString() : "10");
        HashMap<String, Object> map = Maps.newHashMap();
        String chdwxxid = CommonUtil.ternaryOperator(data.get("chdwxxid"));
        map.put("chdwxxid", chdwxxid);
        Page<Map<String, Object>> pjInfoByPage = repositoryXSBF.selectPaging("queryChdwPjInfoByPage", map, page - 1, pageSize);
        return pjInfoByPage;
    }

    private String getCreditRate(int xy) {
        String value = "";
        if (xy <= 4) {
            value = "较差（4分及以下）";
        } else if (xy >= 9) {
            value = "优秀（9分及以上）";
        } else if (xy >= 7 && xy < 9) {
            value = "良好（7分及以上）";
        } else if (xy >= 5 && xy < 7) {
            value = "一般（5分及以上）";
        }
        return value;
    }

    private String getServiceEval(int fwpj) {
        String result = "";
        switch (fwpj) {
            case 1:
                result = "差";
                break;
            case 2:
                result = "较差";
                break;
            case 3:
                result = "一般";
                break;
            case 4:
                result = "满意";
                break;
            case 5:
                result = "非常满意";
                break;
        }
        return result;
    }

    @Override
    public ResponseMessage evaluationCheckResults(Map map) {
        ResponseMessage message = new ResponseMessage();
        int page = Integer.parseInt(map.get("page") != null ? map.get("page").toString() : Constants.DCHY_XMGL_PAGINATION_PAGE);
        int pageSize = Integer.parseInt(map.get("size") != null ? map.get("size").toString() : Constants.DCHY_XMGL_PAGINATION_SIZE);
        logger.info("******************page:" + page);
        logger.info("******************pageSize:" + pageSize);

        String chdwmc = "";
        String mlkid = CommonUtil.formatEmptyValue(MapUtils.getString(map, "mlkid"));
        if (StringUtils.isNotBlank(mlkid)) {
            DchyXmglMlk xmglMlk = entityMapper.selectByPrimaryKey(DchyXmglMlk.class, mlkid);
            if (null != xmglMlk) {
                chdwmc = xmglMlk.getDwmc();
            }
        }
        map.put("chdwmc", chdwmc);
        Page<Map<String, Object>> evaluationCheckResultsByPage = repositoryXSBF.selectPaging("evaluationCheckResultsByPage", map, page - 1, pageSize);

        List<Map<String, Object>> rows = evaluationCheckResultsByPage.getContent();
        logger.info("******************rows:" + rows);
        if (CollectionUtils.isNotEmpty(rows)) {
            for (Map<String, Object> dataMap : rows) {
                String glsxid = CommonUtil.formatEmptyValue(MapUtils.getString(dataMap, "CGCCID"));
                List<String> wjzxids = queryWjzxidListByGlsxid(glsxid);

                if (wjzxids.size() > 0) {
                    dataMap.put("SFSC", "1");
                } else {
                    dataMap.put("SFSC", "0");
                }
            }
        }

        return ResponseUtil.wrapResponseBodyByPage(evaluationCheckResultsByPage);
    }

    @Override
    public List<String> queryWjzxidListByGlsxid(String glsxid) {
        List<String> wjzxids = Lists.newArrayList();
        if (StringUtils.isNotBlank(glsxid)) {
            Example exampleSjxx = new Example(DchyXmglSjxx.class);
            exampleSjxx.createCriteria().andEqualTo("glsxid", glsxid);
            List<DchyXmglSjxx> dchyXmglSjxxList = entityMapperXSBF.selectByExample(exampleSjxx);
            if (CollectionUtils.isNotEmpty(dchyXmglSjxxList)) {
                for (DchyXmglSjxx dchyXmglSjxx : dchyXmglSjxxList) {
                    Example exampleSjcl = new Example(DchyXmglSjcl.class);
                    exampleSjcl.createCriteria().andEqualTo("sjxxid", dchyXmglSjxx.getSjxxid());
                    List<DchyXmglSjcl> dchyXmglSjclList = entityMapperXSBF.selectByExample(exampleSjcl);
                    if (CollectionUtils.isNotEmpty(dchyXmglSjclList)) {
                        for (DchyXmglSjcl dchyXmglSjcl : dchyXmglSjclList) {
                            if (StringUtils.isNotBlank(dchyXmglSjcl.getWjzxid())) {
                                wjzxids.add(dchyXmglSjcl.getWjzxid());
                            }
                        }
                    }
                }
            }

        }

        return wjzxids;
    }

}
